<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Mark Mossberg's Blog]]></title>
  <link href="http://blog.mark.lc/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.mark.lc/"/>
  <updated>2015-04-25T18:54:50-04:00</updated>
  <id>http://blog.mark.lc/</id>
  <author>
    <name><![CDATA[Mark Mossberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SU-CTF 2014 - "Commerical Application!"]]></title>
    <link href="http://blog.mark.lc/blog/2014/09/27/suctf_re/"/>
    <updated>2014-09-27T00:00:00-04:00</updated>
    <id>http://blog.mark.lc/blog/2014/09/27/suctf_re</id>
    <content type="html"><![CDATA[<p>This weekend I decided to try playing <a href="https://ctftime.org/event/159">SU-CTF</a>.
I&rsquo;m pretty bad at CTF to be honest, so I was pretty thrilled to get
one of the 200 point challenges in the third (of five) difficulty tiers.</p>

<h2>&ldquo;Commerical Application!&rdquo;</h2>

<p>For this challenge, we&rsquo;re given an Android application and the hint:</p>

<blockquote><p>Flag is a serial number.</p></blockquote>

<p>I installed it on my phone, here&rsquo;s what it looks like:</p>

<p><img src="/images/apk1.png" alt="" />
<img src="/images/apk2.png" alt="" />
<img src="/images/apk3.png" alt="" />
<img src="/images/apk4.png" alt="" /></p>

<p>I can tap on &ldquo;Picture-01&rdquo; and sliding to the right reveals this picture, but
if I try to tap on &ldquo;Picture-02&rdquo; or &ldquo;Pictures-03&rdquo; the app says I need to
enter a registration key. If I tap on the gear in the top right, I&rsquo;m
prompted to enter my product key.</p>

<p>Running <code>file</code> reveals that <code>.apk</code> files are apparently just Zip archives,
so let&rsquo;s try simply <code>unzip</code>&lsquo;ing it.</p>

<p>{% highlight bash %}
$ file suCTF.apk
suCTF.apk: Zip archive data, at least v2.0 to extract
$ unzip suCTF.apk
Archive:  suCTF.apk
  inflating: assets/db.db
  inflating: res/color/abs<strong>primary_text_disable_only_holo_dark.xml
  inflating: res/color/abs</strong>primary_text_disable_only_holo_light.xml
  &hellip;
  inflating: classes.dex
  inflating: META-INF/MANIFEST.MF
  inflating: META-INF/CERT.SF
  inflating: META-INF/CERT.RSA
{% endhighlight %}</p>

<p>Cool! Now we have all the miscellaneous files that comprise the app. There&rsquo;s
a database file, various <code>.xml</code> design files, and most interestingly, a
<code>classes.dex</code> file. <code>.dex</code> files contain bytecode run on the Android Dalvik VM, which
is currently the Java runtime for Android devices, so <code>classes.dex</code> likely
contains the code that runs the app, in compiled form. We can use the nifty
<code>d2j-dex2jar</code> utility for decompiling it into a <code>classes-dex2jar.jar</code> file. <code>.jar</code>
files are apparently also Zip archives, and we can again <code>unzip</code> it to extract
its contents.</p>

<p>{% highlight bash %}
$ file classes.dex
classes.dex: Dalvik dex file version 035
$ d2j-dex2jar classes.dex
dex2jar classes.dex -> classes-dex2jar.jar
$ unzip classes-dex2jar.jar
  &hellip;
  inflating: edu/sharif/ctf/BuildConfig.class
  inflating: edu/sharif/ctf/CTFApplication.class
  inflating: edu/sharif/ctf/R$attr.class
  inflating: edu/sharif/ctf/R$bool.class
  inflating: edu/sharif/ctf/R$color.class
  inflating: edu/sharif/ctf/R$dimen.class
  inflating: edu/sharif/ctf/R$drawable.class
  inflating: edu/sharif/ctf/R$id.class
  inflating: edu/sharif/ctf/R$integer.class
  inflating: edu/sharif/ctf/R$layout.class
  inflating: edu/sharif/ctf/R$menu.class
  inflating: edu/sharif/ctf/R$string.class
  inflating: edu/sharif/ctf/R$style.class
  inflating: edu/sharif/ctf/R$styleable.class
  inflating: edu/sharif/ctf/R.class
  inflating: edu/sharif/ctf/activities/MainActivity$4.class
  inflating: edu/sharif/ctf/activities/MainActivity$5.class
  inflating: edu/sharif/ctf/activities/MainActivity$6.class
  inflating: edu/sharif/ctf/config/AppConfig.class
  inflating: edu/sharif/ctf/db/DBHelper.class
  inflating: edu/sharif/ctf/fragments/DListFragment$1.class
  inflating: edu/sharif/ctf/fragments/ListFragment$1.class
  inflating: edu/sharif/ctf/fragments/ListFragment$OnPictureSelectedListener.class
  inflating: edu/sharif/ctf/security/KeyVerifier.class
  &hellip;
{% endhighlight %}</p>

<p>This produces a TON of various <code>.class</code> files, but the most interesting lie
in the <code>edu/sharif/ctf/</code> directory and are the compiled versions of the actual
code that makes up this app. We can use the <code>jad</code> tool to decompile these back
into Java source and start trying to reverse the product key.</p>

<p>There&rsquo;s a directory in the app source called <code>security/</code> and contains a file
called <code>KeyVerifier.class</code> that seems pretty promising. After decompiling it,
we find a <code>KeyVerifier</code> class with some pretty cool functions.</p>

<p>{% highlight java %}
public static boolean isValidLicenceKey(String s, String s1, String s2)
{
    boolean flag;
    if(encrypt(s, s1, s2).equals(&ldquo;29a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84&rdquo;))
        flag = true;
    else
        flag = false;
    return flag;
}</p>

<p>public static String encrypt(String s, String s1, String s2)
{
    String s3 = &ldquo;&rdquo;;
    String s4;
    SecretKeySpec secretkeyspec = new SecretKeySpec(hexStringToBytes(s1), &ldquo;AES&rdquo;);
    Cipher cipher = Cipher.getInstance(&ldquo;AES/CBC/PKCS5Padding&rdquo;);
    cipher.init(1, secretkeyspec, new IvParameterSpec(s2.getBytes()));
    s4 = bytesToHexString(cipher.doFinal(s.getBytes()));
    s3 = s4;
<em>L2:
    return s3;
    Exception exception;
    exception;
    exception.printStackTrace();
    if(true) goto </em>L2; else goto <em>L1
</em>L1:
}
{% endhighlight %}</p>

<p>It&rsquo;s pretty clear that <code>isValidLicenceKey()</code> is what processes the product key
prompt in the app. The <code>encrypt()</code> function shows us that the first paramter
<code>s</code> is the cleartext to be encrypted, the second parameter <code>s1</code> is the AES
encryption key, and the last parameter <code>s2</code> is the AES
<a href="http://en.wikipedia.org/wiki/Initialization_vector">initialization vector</a>.
After doing a bit of grepping, I confirmed this by decompiling
<code>activities/MainActivity.class</code> and finding this code snippet:</p>

<p>{% highlight java %}
public void onClick(DialogInterface dialoginterface, int i)
{
    if(KeyVerifier.isValidLicenceKey(userInput.getText().toString(), app.getDataHelper().getConfig().getSecurityKey(), app.getDataHelper().getConfig().getSecurityIv()))
    {
        app.getDataHelper().updateLicence(2014);
        MainActivity.isRegisterd = true;
        showAlertDialog(context, &ldquo;Thank you, Your application has full licence. Enjoy it&hellip;!&rdquo;);
    } else
    {
        showAlertDialog(context, &ldquo;Your licence key is incorrect&hellip;! Please try again with another.&rdquo;);
    }
}
{% endhighlight %}</p>

<p>With
this in mind, the code seems to AES encrypt the user input and check if it matches
a certain output. If we had the AES key and IV, we could decrypt the given
output and find the plaintext product key.</p>

<p>Tracing through the calls for the second and third parameters passed into
<code>isValidLicense()</code> I found that
the AES key and IV were stored in the <code>assets/db.db</code> SQLite database I noticed
earlier.</p>

<p>{% highlight bash %}
$ sqlite3 assets/db.db
 &hellip;
 sqlite> select * from config;
 a           b           c           d           e                 f                                 g           h               i</p>

<hr />

<p> 1           2           2014        0           a5efdbd57b84ca36  37eaae0141f1a3adf8a1dee655853714  1000        ctf.sharif.edu  9
 {% endhighlight %}</p>

<p>There are no headers to the columns, but it is pretty obvious that the key
is the longer and the IV is the shorter of the &ldquo;interesting strings&rdquo; in the
database. For further confidence, I can verify this from the decompiled code
in <code>db/DBHelper.class</code>.</p>

<p>{% highlight java %}
public AppConfig getConfig()
{
    boolean flag = true;
    AppConfig appconfig = new AppConfig();
    Cursor cursor = myDataBase.rawQuery(SELECT_QUERY, null);
    if(cursor.moveToFirst())
    {
        appconfig.setId(cursor.getInt(0));
        appconfig.setName(cursor.getString(flag));
        appconfig.setInstallDate(cursor.getString(2));
        if(cursor.getInt(3) &lt;= 0)
            flag = false;
        appconfig.setValidLicence(flag);
        appconfig.setSecurityIv(cursor.getString(4));
        appconfig.setSecurityKey(cursor.getString(5));
        appconfig.setDesc(cursor.getString(7));
    }
    return appconfig;
}
{% endhighlight %}</p>

<p>Using the key, IV and expected encrypted output, I wrote a simple decryption
program.</p>

<p>{% highlight java %}
import java.util.*;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;</p>

<p>public class blah {
    // omitted for brevity
    public static String bytesToHexString(byte abyte0[]) { &hellip; }
    public static byte[] hexStringToBytes(String s) { &hellip; }</p>

<pre><code>public static String decrypt(String s, String s1, String s2)
{
    SecretKeySpec secretkeyspec = new SecretKeySpec(hexStringToBytes(s1), "AES");
    Cipher cipher = null;
    byte[] key = null;
    try {
        cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, secretkeyspec, new IvParameterSpec(s2.getBytes()));
        key = cipher.doFinal(hexStringToBytes(s));
    } catch (Exception e) {
        e.printStackTrace();
    }
    return new String(key);
}

public static void main(String args[]) {
    String e = "29a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84";
    String iv = "a5efdbd57b84ca36";
    String key = "37eaae0141f1a3adf8a1dee655853714";
    System.out.println(decrypt(e, key, iv));
}
</code></pre>

<p>}
{% endhighlight %}</p>

<p>{% highlight bash %}
$ java blah
fl-ag-IS-se-ri-al-NU-MB-ER
{% endhighlight %}</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
