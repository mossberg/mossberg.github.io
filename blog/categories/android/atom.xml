<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Mark Mossberg's Blog]]></title>
  <link href="http://blog.mark.lc/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.mark.lc/"/>
  <updated>2014-12-14T22:14:35-05:00</updated>
  <id>http://blog.mark.lc/</id>
  <author>
    <name><![CDATA[Mark Mossberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SU-CTF 2014 - "Commerical Application!"]]></title>
    <link href="http://blog.mark.lc/blog/2014/09/27/suctf_re/"/>
    <updated>2014-09-27T00:00:00-04:00</updated>
    <id>http://blog.mark.lc/blog/2014/09/27/suctf_re</id>
    <content type="html"><![CDATA[<p>This weekend I decided to try playing <a href="https://ctftime.org/event/159">SU-CTF</a>.
I&rsquo;m pretty bad at CTF to be honest, so I was pretty thrilled to get
one of the 200 point challenges in the third (of five) difficulty tiers.</p>

<h2>&ldquo;Commerical Application!&rdquo;</h2>

<p>For this challenge, we&rsquo;re given an Android application and the hint:</p>

<blockquote><p>Flag is a serial number.</p></blockquote>

<p>I installed it on my phone, here&rsquo;s what it looks like:</p>

<p><img src="/images/apk1.png" alt="" />
<img src="/images/apk2.png" alt="" />
<img src="/images/apk3.png" alt="" />
<img src="/images/apk4.png" alt="" /></p>

<p>I can tap on &ldquo;Picture-01&rdquo; and sliding to the right reveals this picture, but
if I try to tap on &ldquo;Picture-02&rdquo; or &ldquo;Pictures-03&rdquo; the app says I need to
enter a registration key. If I tap on the gear in the top right, I&rsquo;m
prompted to enter my product key.</p>

<p>Running <code>file</code> reveals that <code>.apk</code> files are apparently just Zip archives,
so let&rsquo;s try simply <code>unzip</code>&lsquo;ing it.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>file suCTF.apk
suCTF.apk: Zip archive data, at least v2.0 to extract
<span class="nv">$ </span>unzip suCTF.apk
Archive:  suCTF.apk
  inflating: assets/db.db
  inflating: res/color/abs&lt;strong&gt;primary_text_disable_only_holo_dark.xml
  inflating: res/color/abs&lt;/strong&gt;primary_text_disable_only_holo_light.xml
  <span class="p">&amp;</span>hellip<span class="p">;</span>
  inflating: classes.dex
  inflating: META-INF/MANIFEST.MF
  inflating: META-INF/CERT.SF
  inflating: META-INF/CERT.RSA</code></pre></div></p>

<p>Cool! Now we have all the miscellaneous files that comprise the app. There&rsquo;s
a database file, various <code>.xml</code> design files, and most interestingly, a
<code>classes.dex</code> file. <code>.dex</code> files contain bytecode run on the Android Dalvik VM, which
is currently the Java runtime for Android devices, so <code>classes.dex</code> likely
contains the code that runs the app, in compiled form. We can use the nifty
<code>d2j-dex2jar</code> utility for decompiling it into a <code>classes-dex2jar.jar</code> file. <code>.jar</code>
files are apparently also Zip archives, and we can again <code>unzip</code> it to extract
its contents.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>file classes.dex
classes.dex: Dalvik dex file version 035
<span class="nv">$ </span>d2j-dex2jar classes.dex
dex2jar classes.dex -&gt; classes-dex2jar.jar
<span class="nv">$ </span>unzip classes-dex2jar.jar
  <span class="p">&amp;</span>hellip<span class="p">;</span>
  inflating: edu/sharif/ctf/BuildConfig.class
  inflating: edu/sharif/ctf/CTFApplication.class
  inflating: edu/sharif/ctf/R<span class="nv">$attr</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$bool</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$color</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$dimen</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$drawable</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$id</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$integer</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$layout</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$menu</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$string</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$style</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$styleable</span>.class
  inflating: edu/sharif/ctf/R.class
  inflating: edu/sharif/ctf/activities/MainActivity<span class="nv">$4</span>.class
  inflating: edu/sharif/ctf/activities/MainActivity<span class="nv">$5</span>.class
  inflating: edu/sharif/ctf/activities/MainActivity<span class="nv">$6</span>.class
  inflating: edu/sharif/ctf/config/AppConfig.class
  inflating: edu/sharif/ctf/db/DBHelper.class
  inflating: edu/sharif/ctf/fragments/DListFragment<span class="nv">$1</span>.class
  inflating: edu/sharif/ctf/fragments/ListFragment<span class="nv">$1</span>.class
  inflating: edu/sharif/ctf/fragments/ListFragment<span class="nv">$OnPictureSelectedListener</span>.class
  inflating: edu/sharif/ctf/security/KeyVerifier.class
  <span class="p">&amp;</span>hellip<span class="p">;</span></code></pre></div></p>

<p>This produces a TON of various <code>.class</code> files, but the most interesting lie
in the <code>edu/sharif/ctf/</code> directory and are the compiled versions of the actual
code that makes up this app. We can use the <code>jad</code> tool to decompile these back
into Java source and start trying to reverse the product key.</p>

<p>There&rsquo;s a directory in the app source called <code>security/</code> and contains a file
called <code>KeyVerifier.class</code> that seems pretty promising. After decompiling it,
we find a <code>KeyVerifier</code> class with some pretty cool functions.</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isValidLicenceKey</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">s1</span><span class="o">,</span> <span class="n">String</span> <span class="n">s2</span><span class="o">)</span>
<span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">flag</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">encrypt</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">).</span><span class="na">equals</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mi">29</span><span class="n">a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;))</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">else</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">flag</span><span class="o">;</span>
<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">s1</span><span class="o">,</span> <span class="n">String</span> <span class="n">s2</span><span class="o">)</span>
<span class="o">{</span>
    <span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
    <span class="n">String</span> <span class="n">s4</span><span class="o">;</span>
    <span class="n">SecretKeySpec</span> <span class="n">secretkeyspec</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SecretKeySpec</span><span class="o">(</span><span class="n">hexStringToBytes</span><span class="o">(</span><span class="n">s1</span><span class="o">),</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">AES</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
    <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">AES</span><span class="o">/</span><span class="n">CBC</span><span class="o">/</span><span class="n">PKCS5Padding</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
    <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">secretkeyspec</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IvParameterSpec</span><span class="o">(</span><span class="n">s2</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
    <span class="n">s4</span> <span class="o">=</span> <span class="n">bytesToHexString</span><span class="o">(</span><span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
    <span class="n">s3</span> <span class="o">=</span> <span class="n">s4</span><span class="o">;</span>
<span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="nl">L2:</span>
    <span class="k">return</span> <span class="n">s3</span><span class="o">;</span>
    <span class="n">Exception</span> <span class="n">exception</span><span class="o">;</span>
    <span class="n">exception</span><span class="o">;</span>
    <span class="n">exception</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="k">goto</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">L2</span><span class="o">;</span> <span class="k">else</span> <span class="k">goto</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">L1</span>
<span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="nl">L1:</span>
<span class="o">}</span></code></pre></div></p>

<p>It&rsquo;s pretty clear that <code>isValidLicenceKey()</code> is what processes the product key
prompt in the app. The <code>encrypt()</code> function shows us that the first paramter
<code>s</code> is the cleartext to be encrypted, the second parameter <code>s1</code> is the AES
encryption key, and the last parameter <code>s2</code> is the AES
<a href="http://en.wikipedia.org/wiki/Initialization_vector">initialization vector</a>.
After doing a bit of grepping, I confirmed this by decompiling
<code>activities/MainActivity.class</code> and finding this code snippet:</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">DialogInterface</span> <span class="n">dialoginterface</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">KeyVerifier</span><span class="o">.</span><span class="na">isValidLicenceKey</span><span class="o">(</span><span class="n">userInput</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">app</span><span class="o">.</span><span class="na">getDataHelper</span><span class="o">().</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getSecurityKey</span><span class="o">(),</span> <span class="n">app</span><span class="o">.</span><span class="na">getDataHelper</span><span class="o">().</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getSecurityIv</span><span class="o">()))</span>
    <span class="o">{</span>
        <span class="n">app</span><span class="o">.</span><span class="na">getDataHelper</span><span class="o">().</span><span class="na">updateLicence</span><span class="o">(</span><span class="mi">2014</span><span class="o">);</span>
        <span class="n">MainActivity</span><span class="o">.</span><span class="na">isRegisterd</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">showAlertDialog</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Thank</span> <span class="n">you</span><span class="o">,</span> <span class="n">Your</span> <span class="n">application</span> <span class="n">has</span> <span class="n">full</span> <span class="n">licence</span><span class="o">.</span> <span class="n">Enjoy</span> <span class="n">it</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;!&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
    <span class="o">}</span> <span class="k">else</span>
    <span class="o">{</span>
        <span class="n">showAlertDialog</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Your</span> <span class="n">licence</span> <span class="n">key</span> <span class="n">is</span> <span class="n">incorrect</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;!</span> <span class="n">Please</span> <span class="k">try</span> <span class="n">again</span> <span class="n">with</span> <span class="n">another</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>With
this in mind, the code seems to AES encrypt the user input and check if it matches
a certain output. If we had the AES key and IV, we could decrypt the given
output and find the plaintext product key.</p>

<p>Tracing through the calls for the second and third parameters passed into
<code>isValidLicense()</code> I found that
the AES key and IV were stored in the <code>assets/db.db</code> SQLite database I noticed
earlier.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sqlite3 assets/db.db
 <span class="p">&amp;</span>hellip<span class="p">;</span>
 sqlite&gt; <span class="k">select</span> * from config<span class="p">;</span>
 a           b           c           d           e                 f                                 g           h               i&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; <span class="m">1</span>           <span class="m">2</span>           <span class="m">2014</span>        <span class="m">0</span>           a5efdbd57b84ca36  37eaae0141f1a3adf8a1dee655853714  <span class="m">1000</span>        ctf.sharif.edu  9</code></pre></div></p>

<p>There are no headers to the columns, but it is pretty obvious that the key
is the longer and the IV is the shorter of the &ldquo;interesting strings&rdquo; in the
database. For further confidence, I can verify this from the decompiled code
in <code>db/DBHelper.class</code>.</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="n">AppConfig</span> <span class="nf">getConfig</span><span class="o">()</span>
<span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="n">AppConfig</span> <span class="n">appconfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AppConfig</span><span class="o">();</span>
    <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">myDataBase</span><span class="o">.</span><span class="na">rawQuery</span><span class="o">(</span><span class="n">SELECT_QUERY</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">())</span>
    <span class="o">{</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">flag</span><span class="o">));</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setInstallDate</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="mi">0</span><span class="o">)</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setValidLicence</span><span class="o">(</span><span class="n">flag</span><span class="o">);</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setSecurityIv</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setSecurityKey</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">5</span><span class="o">));</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setDesc</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">7</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">appconfig</span><span class="o">;</span>
<span class="o">}</span></code></pre></div></p>

<p>Using the key, IV and expected encrypted output, I wrote a simple decryption
program.</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.Cipher</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.IvParameterSpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.SecretKeySpec</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">blah</span> <span class="o">{</span>
    <span class="c1">// omitted for brevity</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">bytesToHexString</span><span class="o">(</span><span class="kt">byte</span> <span class="n">abyte0</span><span class="o">[])</span> <span class="o">{</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">hexStringToBytes</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">decrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">s1</span><span class="o">,</span> <span class="n">String</span> <span class="n">s2</span><span class="o">)</span>
<span class="o">{</span>
    <span class="n">SecretKeySpec</span> <span class="n">secretkeyspec</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SecretKeySpec</span><span class="o">(</span><span class="n">hexStringToBytes</span><span class="o">(</span><span class="n">s1</span><span class="o">),</span> <span class="s">&quot;AES&quot;</span><span class="o">);</span>
    <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;AES/CBC/PKCS5Padding&quot;</span><span class="o">);</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">secretkeyspec</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IvParameterSpec</span><span class="o">(</span><span class="n">s2</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">hexStringToBytes</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">e</span> <span class="o">=</span> <span class="s">&quot;29a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84&quot;</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">iv</span> <span class="o">=</span> <span class="s">&quot;a5efdbd57b84ca36&quot;</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;37eaae0141f1a3adf8a1dee655853714&quot;</span><span class="o">;</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">decrypt</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">iv</span><span class="o">));</span>
<span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>java blah
fl-ag-IS-se-ri-al-NU-MB-ER</code></pre></div></p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
