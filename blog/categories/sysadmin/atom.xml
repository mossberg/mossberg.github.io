<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sysadmin | Mark Mossberg's Blog]]></title>
  <link href="http://blog.mark.lc/blog/categories/sysadmin/atom.xml" rel="self"/>
  <link href="http://blog.mark.lc/"/>
  <updated>2015-08-11T22:44:03-04:00</updated>
  <id>http://blog.mark.lc/</id>
  <author>
    <name><![CDATA[Mark Mossberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Sketchy Website 101]]></title>
    <link href="http://blog.mark.lc/blog/2015/04/25/building-a-sketchy-website-101/"/>
    <updated>2015-04-25T17:42:10-04:00</updated>
    <id>http://blog.mark.lc/blog/2015/04/25/building-a-sketchy-website-101</id>
    <content type="html"><![CDATA[<p>Back in April, I won a free &ldquo;.club&rdquo; domain through gandi.net&rsquo;s
<a href="https://15.gandi.net">anniversary</a> prize giveaway. I really didn&rsquo;t need
a &ldquo;.club&rdquo; domain in particular, so I thought it would be pretty fun to
register a stereotypical &ldquo;sketchy&rdquo; domain and set it up as a drive-by
download site or something, because while I&rsquo;ve <em>heard</em> of doing this kind of
thing, I&rsquo;ve never actually done it before. Here&rsquo;s a blog post walking through
what I did. The usual disclaimer applies here: I did this purely for my
own education and learning experience and am not responsible for anything
you do with it.</p>

<h3>Step 1: Register your sketchy domain</h3>

<p>I chose <a href="http://freemoviedownload.club">http://freemoviedownload.club</a>.</p>

<h3>Step 2: Set up drive-by downloads</h3>

<p>This involves configuring your web server to automatically set the
<code>Content-Type</code> header of the resource you want to force download
to <code>application/octet-stream</code>. That should make most web browsers trigger
a download file prompt to actually download the file. Safari curiously
doesn&rsquo;t support prompts for downloaded file location like Chrome and Firefox,
so in that case, it will immediately download the file to <code>~/Downloads</code>.</p>

<p>I&rsquo;m going to try to force a drive-by download of a jpg file, so I added
the below config to my <code>.htaccess</code> file in Apache&rsquo;s <code>DocumentRoot</code>.</p>

<pre><code class="xml .htaccess">&lt;Files *.jpg&gt;
        ForceType application/octet-stream
&lt;/Files&gt;
</code></pre>

<p>That will force browers to download the image, rather than rendering it
when a browser tries to access <code>http://freemoviedownload.club/image.jpg</code>, for
example.</p>

<p>At this point, we&rsquo;re technically done. We can send someone a link to a file
and, assuming they say yes to the prompt (or use Safari), download it to their
computer.  But for some extra polish, I want to have an actual website with
content and have the download come from <em>that</em> page.</p>

<h3>Step 3: Redirect</h3>

<p>We can accomplish this with a trivial Javascript redirect that executes
after the page has loaded. We can even add a delay before the download happens
to give them time to read the website or whatever. The redirect will need
to be to the path configured in step 2, but this will give the illusion that
the download is coming from the <code>index.html</code> page.</p>

<p>&#8220;`html index.html
you have arrived at the official free movie download club! enjoy your download</p>

<script type="text/javascript" charset="utf-8">
    function f() { document.location = 'dickbutt.jpg' }
    setTimeout(f, 2000);
</script>


<p>&#8220;`</p>

<p>That&rsquo;s it! Anyone that browses to the website will automatically get a nice
&ldquo;dickbutt.jpg&rdquo; image downloaded to their machine. Again, particularly effective
against Safari and Chrome for Android, in my testing.</p>

<p><img src="/images/sketchy.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netcat Refresher]]></title>
    <link href="http://blog.mark.lc/blog/2014/03/05/netcat/"/>
    <updated>2014-03-05T00:00:00-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/03/05/netcat</id>
    <content type="html"><![CDATA[<p><em>Quick overview of the legendary Unix tool, netcat, with examples and applications</em></p>

<h2>Introduction</h2>

<p><a href="https://en.wikipedia.org/wiki/Netcat">Netcat</a> is a great tool for all things networking and is commonly nicknamed &ldquo;the TCP/IP Swiss-army knife&rdquo; due to its versatility and utility. An absolute must-know for sysadmins and hackers. In this article, I&rsquo;ll go over a few common uses I have for it that I frequently forget after not using it for a while, primarily for my own personal reference.</p>

<p>Before I begin, I should point out that there are a few variants on netcat that have slightly different options and behaviors but are all essentially the same in &ldquo;spirit and functionality&rdquo;, as the <a href="http://nmap.org/ncat/">ncat</a> man page describes it.</p>

<p>The original netcat comes from the OpenBSD package and was written by &ldquo;Hobbit&rdquo;. This is the default version that comes with OS X and Ubuntu. The version that I use and will cover is the standard GNU Netcat, by Giovanni Giacobbi, which is a rewrite of the original. This available using <a href="http://brew.sh">brew</a> on OS X. On Ubuntu it&rsquo;s called &ldquo;netcat-traditional&rdquo; which you can <code>apt-get</code> and then run with <code>nc.traditional</code>. Lastly, there is <a href="http://nmap.org/ncat">ncat</a>, which is a netcat implementation by our friends from the <a href="http://nmap.org">nmap</a> team. It is designed to modernize netcat and adds features like SSL, IPv6, and proxying which aren&rsquo;t available in the original(s).</p>

<h2>Usage</h2>

<p>At its core, netcat is a tool for creating arbitrary TCP connections, which looks like</p>

<pre><code>$ netcat [host] [port]
</code></pre>

<p>where host is either an IP Address or a domain name, and port is the TCP port to connect to.</p>

<p>You can also use netcat to do the reverse: listen for arbitrary TCP connections. This looks like</p>

<pre><code>$ netcat -l -p [port] [host]
</code></pre>

<p>Here, host is an optional parameter which lets you limit what host can create connections.</p>

<h4>Example: Chat</h4>

<p>Using these two behaviors, we can create a crude chat system. One one host, listen for connections on a port.</p>

<pre><code>$ netcat -l -p 1337
</code></pre>

<p>On the same one, in another terminal, connect to it on that port.</p>

<pre><code>$ nc localhost 1337
</code></pre>

<p>There won&rsquo;t be a prompt, but when you enter text and press enter, it will appear in the other terminal. You can just as easily do this between different hosts and have a super basic chat setup.</p>

<p><img src="https://draftin.com:443/images/12181?token=V4hz4Qtwi_uM_-4ulkErwUudxL_qY8D2yxx-fPjLSffSc8-FV0FOVRlvd4psBi-fLricHlJLjufBWr6E91R_spQ" alt="" /></p>

<h3>Example: Curl-like behavior</h3>

<p>You can also use netcat to emulate curl and interact with HTTP servers. Connect to the server on port 80 (or whatever port it&rsquo;s running on) and you can then type out the HTTP request to send to it. When you&rsquo;re finished, hit enter twice and it will send.</p>

<pre><code>[mark:~]{ nc example.org 80
GET / HTTP/1.1

HTTP/1.1 400 Bad Request
Content-Type: text/html
Content-Length: 349
Connection: close
Date: Wed, 05 Mar 2014 20:15:42 GMT
Server: ECSF (mdw/1383)

&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;title&gt;400 - Bad Request&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;400 - Bad Request&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>As you can see here, we sent a bare-bones HTTP request (<code>GET / HTTP/1.1</code>) which was successfully sent to the server. The server responded with a 400, because our request didn&rsquo;t contain enough information, but that&rsquo;s not important; if we had filled in the right headers, it would have responded with the home page for example.org.</p>

<h2>For Hackers</h2>

<p>There are two applications for netcat that I find particularly useful in pen-testing situations.</p>

<h3>Recon</h3>

<p>The first is helpful for the recon stage, which is essentially getting information on your target. Sometimes network services may give away version information when an arbitrary network connection is made. For example, OpenSSH by default gives away it&rsquo;s version information as well as information on the host, when you connect. For example,</p>

<pre><code>$ netcat 1.2.3.4 22
SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.1
</code></pre>

<p>is typically what you might see. For an attacker, this is pretty valuable stuff! MySQL behaves similarly.</p>

<pre><code>$ netcat 1.2.3.4 3306
J
5.5.33-.?2|&gt;\8��@x\E$"zeic2lmysql_native_password
</code></pre>

<p>The output isn&rsquo;t as clear as OpenSSH, but we can confirm that MySQL is indeed running, and we can infer that the version is &ldquo;5.5.33&rdquo;. For information on removing these banners, check out my <a href="http://blog.mark.lc/blog/2014/01/10/banner-hiding/">blog post</a> on it.</p>

<h3>Persistence/Access</h3>

<p>The other application is when you have achieved command execution, but not exactly shell access. You can use netcat to create a nifty backdoor which you can externally connect to. To create the backdoor, we&rsquo;ll use the <code>-e</code> flag to tell netcat to execute a binary on receiving a connection. We want a shell, so we&rsquo;ll say <code>-e /bin/sh</code>. The whole command will look like:</p>

<pre><code>$ netcat -l -p 1337 -e /bin/sh
</code></pre>

<p>which will give you a backdoor on port 1337, which will then let you run commands upon connecting to that port. For a good example, check out my other <a href="http://blog.mark.lc/blog/2014/03/01/ihackedit/">blog post</a> where I actually used this.</p>

<h2>Conclusion</h2>

<p>That was a quick overview of netcat including its basic functionality and some example use cases. Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CCDC Regional Qualifiers 2014]]></title>
    <link href="http://blog.mark.lc/blog/2014/01/25/ccdc2014/"/>
    <updated>2014-01-25T23:56:00-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/01/25/ccdc2014</id>
    <content type="html"><![CDATA[<p><em>Thoughts on the Collegiate Cyber Defense Competition 2014 regional qualifiers</em></p>

<p>Today, from approximately 10:00 am to 6:00 pm, I competed with 7 other students on Northeastern University&rsquo;s Cyber Defense team in the Northeast Collegiate Cyber Defense Competition. It was a great experience, and although it wasn&rsquo;t exactly what I expected, I still had a lot of fun.</p>

<h2>Overview</h2>

<p>Basically, the way this competition works is each team is given the IT infrastructure of a small business and it is their task to lock down the security of the infrastructure. They have to do this while under attack from a Red Team of hackers who are trying to break in and exfiltrate sensitive data (credit card info, <a href="https://en.wikipedia.org/wiki/Personally_identifiable_information">PII</a>, etc.), or just generally mess with and pwn you. In this case, we were managing an e-commerce website that included a web server running a CMS, a DNS (and MySQL, interestingly) server, a firewall, a mail server, and a FTP server.</p>

<h2>Approach</h2>

<p>Personally, myself and a teammate tag teamed securing the DNS/database server. This was an important box to secure because if it got pwnt, an attacker would be able to disrupt the DNS of the e-commerce site, disrupt email, and most importantly, potentially dump the database and exfiltrate sensitive information. Throughout the course of the competition, we implemented basic security measures such as changing default passwords for important system and database accounts, and killing unnecessary network services (such as ntpd, sshd, and apache in our case) as well as more involve measures such as skin-tight iptables rules that controlled specifically what traffic would be able to reach our box, and audit rules that would monitor directories/binaries that an attacker on the system would probably modify or execute.</p>

<h2>Expectations</h2>

<p>At the beginning of the competition, I had a bit of an adrenaline rush going because I was constantly waiting for the red team to come out of nowhere and own us in some place that we hadn&rsquo;t thought of, or secured yet, or <em>something</em>. Over time that rush wore off because&hellip;the red team never seemed to show up. At no point in the competition did we see any signs of unauthorized access on our box, or even potentially malicious traffic reaching it. Although I do appreciate it, this was a bit of a letdown, given my expectations of getting totally wrecked by the red team.</p>

<h2>Results</h2>

<p>Ultimately, our team did well enough that we were able to place among the top teams competing and qualify for the Northeast regional competition to be held in March in New Hampshire. Definitely excited for that; I&rsquo;ve learned a ton about cyber defense by getting involved with the team and I&rsquo;m looking forward to putting it to use at the real event!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Banner Hiding on Ubuntu 12.04]]></title>
    <link href="http://blog.mark.lc/blog/2014/01/10/banner-hiding/"/>
    <updated>2014-01-10T17:30:00-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/01/10/banner-hiding</id>
    <content type="html"><![CDATA[<p>In most cases, the first phase of any sort of cyber-attack is the &ldquo;fingerprinting&rdquo; phase. This essentially involves an attacker attempting to ascertain as much information as possible about the target in question, say, a web server also running an ssh service. Some basic pieces of info that the attacker would be interesting in gathering would be the OS installed on the server, and the types of web and ssh servers running as well as version numbers for all of these. With this info, at the very least, the attacker would be able to google <em>&ldquo;[web/ssh server] [version] vulnerabilities&rdquo;</em>, so you can see how it might be a good idea to keep this sort of info hidden. Of course, there is a valid <a href="http://en.wikipedia.org/wiki/Security_through_obscurity">security through obscurity</a> argument to be made here, and even the Apache docs<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> themselves state that</p>

<blockquote><p>&hellip;disabling the Server: header does nothing at all to make your server more secure; the idea of &ldquo;security through obscurity&rdquo; is a myth and leads to a false sense of safety.</p></blockquote>

<p>While I can see how it&rsquo;s not acceptable to use obscurity as a complete solution for potential vulnerabilities, I disagree with the assertion that it does &ldquo;nothing at all.&rdquo; Obviously, everyone should aim to make their systems secure at a fundamental level, and obscurity is no substitute for that, however every little bit that you can do to make it more challenging for an attacker, in order to bolster <em>your existing security implementation</em>, is worth it, in my opinion.</p>

<p>Moving back to the original topic, you might be surprised to know how much of this information (services, version numbers) your server gives away by default. For example, let&rsquo;s take a look at the response headers from a default Apache install:</p>

<p><a href="http://img.svbtle.com/sgoa4yt9b3putw.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/sgoa4yt9b3putw_small.png" alt="Screen_Shot_2013-12-15_at_1.38.13_AM.png" /></a></p>

<p>Right off the bat, we can see that we&rsquo;re giving away our OS, web server, and version. Let&rsquo;s make it a little harder for an attacker and hide everything except for &ldquo;Apache&rdquo;, which can be done with a trivial edit to your <code>/etc/apache2/apache2.conf</code> file. Simply append the following lines at the end of the file.</p>

<pre><code>ServerTokens Prod
ServerSignature Off
</code></pre>

<p>Technically all you really need is the first line, which will do what we want, but the second line will also remove server info in Apache generated pages (error pages, directory listings), so it&rsquo;s probably a good idea too. That gets us this far:</p>

<p><a href="http://img.svbtle.com/1gs6rgbxmeliq.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/1gs6rgbxmeliq_small.png" alt="Screen_Shot_2013-12-15_at_2.01.18_AM.png" /></a></p>

<p>Unfortunately, &ldquo;Apache&rdquo; is as far as we can go with these configuration files; there is no option to turn the server header completely off. However, there is one other thing we can do&hellip; get out your hex editors<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, boys, we&rsquo;re going binary patching! Yes, you heard me right, we&rsquo;re going to directly edit the apache2 binary and remove that pesky banner string.</p>

<p>First off, I recommend making a copy of the binary so if you really screw something up, you can easily get back to where you were. Then get out hexedit and search in the ASCII section for the string &ldquo;Apache&rdquo;. Eventually you&rsquo;ll see some familiar strings all in a row, with the Apache version numbers, etc. There are a couple of them; they represent the different options with the &ldquo;ServerTokens&rdquo; config. The &ldquo;Prod&rdquo; option corresponds to the first instance of &ldquo;Apache&rdquo; there, so let&rsquo;s change it to &ldquo;LOLche&rdquo;. Make sure to only overwrite the existing bytes and nothing more, because doing otherwise could cause other problems with the binary.</p>

<p><a href="http://img.svbtle.com/tok3zivx32pngq.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/tok3zivx32pngq_small.png" alt="Screen_Shot_2013-12-15_at_2.17.43_AM.png" /></a></p>

<p>Restart the apache service, and violá! We&rsquo;re officially running a &ldquo;LOLche&rdquo; web server.</p>

<p><a href="http://img.svbtle.com/rhhj4sha4u4jug.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/rhhj4sha4u4jug_small.png" alt="Screen Shot 2013-12-15 at 2.24.33 AM.png" /></a></p>

<p>While we&rsquo;re messing with these headers, I should point out that you can also add your own headers too. Make sure you have the mod_headers.c Apache module enabled, and then simply append the following to your <code>/etc/apache2/httpd.conf</code>.</p>

<pre><code>&lt;IfModule mod_headers.c&gt;
    Header set Servar "y u look here go away"
&lt;/IfModule&gt;
</code></pre>

<p>Which gives you:</p>

<p><a href="http://img.svbtle.com/9lml4ymw40acog.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/9lml4ymw40acog_small.png" alt="Screen_Shot_2013-12-15_at_2.30.28_AM.png" /></a></p>

<p>Similar to Apache, OpenSSH also gives out a bunch of information by default.</p>

<pre><code>$ nc localhost 22
SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1
</code></pre>

<p>To get rid of the Debian information, just add this line to your <code>/etc/ssh/sshd_config</code>.</p>

<pre><code>DebianBanner no
</code></pre>

<p>However, this still leaves all the OpenSSH stuff. A more complete solution would be to patch the sshd binary in the same way we did the apache binary.</p>

<p>In addition to screwing with people that are physically looking at these headers and stuff, making these quick fixes also makes an nmap port scan much less effective, since this is primarily where nmap gets its information about what services you&rsquo;re running.</p>

<p>Just to reiterate, these configurations are <em>not</em> designed to be security solutions in and of themselves, but are simply meant to bolster your existing security practices and make it just a little harder for attackers to do their thing.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://httpd.apache.org/docs/current/mod/core.html<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I guess you could also use a plain text editor just as well also.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
