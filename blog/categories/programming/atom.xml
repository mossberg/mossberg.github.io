<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Mark Mossberg's Blog]]></title>
  <link href="http://blog.mark.lc/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.mark.lc/"/>
  <updated>2014-12-13T03:50:16-05:00</updated>
  <id>http://blog.mark.lc/</id>
  <author>
    <name><![CDATA[Mark Mossberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Poet Dev Blog #1]]></title>
    <link href="http://blog.mark.lc/blog/2014/12/13/poet-dev-blog-number-1/"/>
    <updated>2014-12-13T02:38:31-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/12/13/poet-dev-blog-number-1</id>
    <content type="html"><![CDATA[<p>For the past eight months or so, I&rsquo;ve been working sporadically on a side
project of mine I call <a href="http://github.com/mossberg/poet">Poet</a>. Poet is
basically a tool for hackers that&rsquo;s useful for post exploitation, that is,
<em>after</em> you&rsquo;ve initially exploited and gotten access to the computer you&rsquo;re
not supposed to have access to. Poet is useful because it essentially acts as
a backdoor you can install into a system to help you maintain access once
you&rsquo;ve gotten your foot in the door.</p>

<p>As a disclaimer, I am building Poet purely for my own education and learning experience.
The code is freely available because I think it might be useful to others interested
in learning about this sort of thing. Use it responsibly.</p>

<p>I&rsquo;ve learned a lot during the process of
building this tool and I thought it would be cool to write a blog post (possibly
more to come)
documenting some of the things I learned, design decisions I made, problems
I encountered, etc. in that process.</p>

<h3>Motivation</h3>

<p>ccdc
oh that&rsquo;s cool, where can I learn more about this
google google&hellip;nothing?
make my own!
seems pretty simple</p>

<h3>v0.1</h3>

<p>the first version of poet is drastically different than the current form
and much, much simpler. it&rsquo;s
server maintained a queue of commands to execute and the client would one
by one pop them off
of course this isn&rsquo;t very useful at all. ideally your interval is very large
to remain stealthy but that puts a hard limit on what commands you can execute
and it&rsquo;s just bad in general</p>

<h3>v0.2</h3>

<p>complete redesign. opt for a model where each ping back is a full opportunity
to do as much as you want. opt for a model where server isn&rsquo;t always on, and
only turned on when access is needed. simple cli versus a webapp.
needed to implement control shell, and poet &ldquo;userland&rdquo; or the commands that
can be run
also design protoc
design crude protocol for socket comms</p>

<h3>v0.3</h3>

<p>oop refactoring
improvements to backend, especially heavily fleshing out the remote shell
chint command for flexibility on the client side</p>

<h3>future work</h3>

<p>improve protocol
encryption
more windows support</p>
]]></content>
  </entry>
  
</feed>
