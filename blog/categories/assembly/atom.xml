<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Assembly | Mark Mossberg's Blog]]></title>
  <link href="http://vmresu.me/blog/categories/assembly/atom.xml" rel="self"/>
  <link href="http://vmresu.me/"/>
  <updated>2016-02-10T21:52:53-05:00</updated>
  <id>http://vmresu.me/</id>
  <author>
    <name><![CDATA[Mark Mossberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Let's Understand: Setjmp()/longjmp()]]></title>
    <link href="http://vmresu.me/blog/2016/02/09/lets-understand-setjmp-slash-longjmp/"/>
    <updated>2016-02-09T00:00:00-05:00</updated>
    <id>http://vmresu.me/blog/2016/02/09/lets-understand-setjmp-slash-longjmp</id>
    <content type="html"><![CDATA[<p>Pretty recently I learned about <code>setjmp()</code> and <code>longjmp()</code>. They&rsquo;re a
neat pair of libc functions which allow you to save your program&rsquo;s current
execution context and resume it at an arbitrary point in the future (with
some caveats<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>).
If you&rsquo;re wondering why this is particularly useful, to quote
the <a href="http://linux.die.net/man/3/setjmp">manpage</a>, one of their main use cases
is &ldquo;&hellip;for dealing with errors and
interrupts encountered in a low-level subroutine of a program.&rdquo; These functions
can be used for more sophisticated error handling than simple error
code return values.</p>

<p>I was curious
how these functions worked, so I decided to take a look
at <a href="http://git.musl-libc.org/cgit/musl/tree/src/setjmp/i386">musl libc&rsquo;s</a>
implementation for x86.
First, I&rsquo;ll explain their interfaces and show an example usage program.
Next, since this post isn&rsquo;t aimed at the assembly wizard, I&rsquo;ll cover some
basics of x86 and Linux calling convention to provide some required background
knowledge.
Lastly, I&rsquo;ll walk through the source, line by line.</p>

<h2>Interfaces</h2>

<pre><code class="c">int setjmp(jmp_buf env);
</code></pre>

<p><code>setjmp()</code> takes a single <code>jmp_buf</code> opaque type, returns 0, and continues
execution afterward normally. A <code>jmp_buf</code> is the
structure that <code>setjmp()</code> will save the calling execution context in. We&rsquo;ll
examine it more closely later on.</p>

<pre><code class="c">void longjmp(jmp_buf env, int val);
</code></pre>

<p><code>longjmp()</code> takes a <code>jmp_buf</code> and an <code>int</code>, simply returning back the given
<code>int</code> value (unless it was 0, in which case it returns 1). The unusual aspect
is that when it returns, the program&rsquo;s execution resumes as if <code>setjmp()</code> had
just been called. This allows the user to jump back an arbitrary amount of
frames on the current call stack (presumably out of some deep routine which had
an error). The return value allows the code following the <code>setjmp()</code> call to
differentiate if <code>setjmp()</code> or <code>longjmp()</code> had just been called, and proceed
accordingly.</p>

<p>Here&rsquo;s a simple example.</p>

<pre><code class="c">#include &lt;setjmp.h&gt;
#include &lt;stdio.h&gt;

void fancy_func(jmp_buf env);

int main() {
    jmp_buf env;
    int ret = setjmp(env);
    if (ret == 0) {
        puts("just returning from setjmp!");
        fancy_func(env);
    } else {
        puts("now returning from longjmp and exiting!");
    }

}

void fancy_func(jmp_buf env) {
    puts("doing fancy stuff");
    longjmp(env, 1);
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./main
just returning from setjmp!
doing fancy stuff
now returning from longjmp and exiting!
</code></pre>

<p>The above code creates a <code>jmp_buf</code> and calls <code>setjmp()</code>, saving the current
execution context. Since <code>setjmp()</code> returns 0, the code follows the
first branch, calling  <code>fancy_func()</code> and
forwarding on the <code>jmp_buf</code>. <code>fancy_func()</code> does some fancy stuff, then calls
<code>longjmp()</code>, passing in the <code>jmp_buf</code> and 1. Execution returns to the if
statement on line 9, except this time, <code>ret</code> is 1 instead of 0, because
we&rsquo;re returning from <code>longjmp()</code>.  Now the code
follows the <code>else</code> path which prints and exits. <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<h2>Background Knowledge</h2>

<p>I&rsquo;ve mentioned &ldquo;execution context&rdquo; a few times, but let&rsquo;s make that a little
more concrete. In this case, a program&rsquo;s execution context can be defined by
the state of the processor&rsquo;s registers.</p>

<p>On x86, the relevant registers are the general purpose, index, and pointer
registers.</p>

<pre><code>General Purpose: eax, ebx, ecx, edx
Index:           esi, edi
Pointer:         ebp, esp, eip
</code></pre>

<p>ebx, ecx, edx, esi, and edi don&rsquo;t have particularly special meaning here and
can be thought of as arbitrary 32 bit storage locations. However eax, ebp, and eip
are a little different.</p>

<ul>
<li>eax is used for function return values (specified by the
<a href="https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl">cdecl</a> calling
convention)</li>
<li>ebp, the frame pointer, contains a pointer to the start of the current stack
frame.</li>
<li>eip, the instruction pointer, contains a pointer to the next instruction to
execute.</li>
</ul>


<p>With this in mind, I initially thought that a <code>jmp_buf</code> would be an array
of 9 ints or something, in order to hold each register.</p>

<p>As it happens, <code>jmp_buf</code> is instead declared as (<a href="http://git.musl-libc.org/cgit/musl/tree/include/setjmp.h#n12">link</a>):</p>

<pre><code class="c">typedef struct __jmp_buf_tag {
    __jmp_buf __jb;
    unsigned long __fl;
    unsigned long __ss[128/sizeof(long)];
} jmp_buf[1];
</code></pre>

<p>And for x86, <code>__jmp_buf</code> is declared as (<a href="http://git.musl-libc.org/cgit/musl/tree/arch/i386/bits/setjmp.h#n1">link</a>):</p>

<pre><code class="c">typedef unsigned long __jmp_buf[6];
</code></pre>

<p>I had never seen this syntax of using bracket operators at the end of a typedef
but searched and found out that the <code>__jmp_buf</code> declaration
declares a fixed size array of 6 unsigned longs, and the <code>jmp_buf</code> declaration
declares an array of 1 <code>struct __jmp_buf_tag</code>. The reason for the array of 1
is so the pointer semantics of arrays kick in and the <code>struct __jmp_buf_tag</code>
is actually passed by reference in calls to <code>setjmp()</code>/<code>longjmp()</code> (as opposed
to being copied).</p>

<p>Anyway, apparently my guess of 9 ints was incorrect, and it&rsquo;s actually 6 (longs).</p>

<p>Before we
can dig into the source to understand why this is,
we need to understand what the state of
the program stack is at the point <code>setjmp()</code> is called, and to do that, we need
to understand
which calling convention is being used. Since we assume x86 Linux, this will
be <a href="https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl">cdecl</a>. The
relevant parts of cdecl for this case are:</p>

<ul>
<li>arguments passed on the stack</li>
<li>integer values and memory addresses returned in eax (as mentioned above)</li>
<li>eax, ecx, edx are caller saved, the rest are callee saved</li>
</ul>


<p><code>setjmp()</code>&rsquo;s code executes immediately
after <code>setjmp()</code>&rsquo;s <code>call</code> instruction, so at the point the first
instruction of <code>setjmp()</code> executes, the stack looks something like this.</p>

<pre><code>&gt; high memory &lt;
| ...                       |
| caller's caller saved eip |
| caller's caller saved ebp | &lt; ebp
| caller stack var 1        | // caller's stack frame
| caller stack var 2        |
| caller stack var ...      |
| caller stack var n        |
| pointer to jmp_buf        | // argument to setjmp
| caller saved eip          | &lt; esp
+---------------------------+ // setjmp's stack frame
&gt; low memory &lt;
</code></pre>

<p>(In this illustration, the stack grows down.)</p>

<p>At the top of the stack is the eip value that the <code>call</code> instruction pushed,
or where to return to after <code>setjmp()</code> finishes. Above that is the first,
and only argument, the pointer to the given <code>jmp_buf</code>. Lastly, above that is
the caller&rsquo;s stack frame.
esp points to the top
of the stack as usual, and ebp is still pointing to the start of the caller&rsquo;s
stack
frame. Usually the first thing a function does is push
ebp on the stack, and set ebp to esp to now point to the current stack frame (a.k.a the prologue),
but since <code>setjmp()</code> is such a minimal function, it doesn&rsquo;t do this.
Furthermore, since ebp is one of the registers that needs to be saved, <code>setjmp()</code>
needs it to be unperturbed.</p>

<p>After <code>setjmp()</code> returns, the stack will look something like this:</p>

<pre><code>&gt; high memory &lt;
| ...                       |
| caller's caller saved eip |
| caller's caller saved ebp | &lt; ebp
| caller stack var 1        | // caller's stack frame
| caller stack var 2        |
| caller stack var ...      |
| caller stack var n        |
| pointer to jmp_buf        | &lt; esp
+---------------------------+
&gt; low memory &lt;
</code></pre>

<p>It&rsquo;s nearly identical, except eip has been popped off the stack, and is now
executing the next instruction after the caller&rsquo;s <code>call setjmp</code>. esp has
also been updated accordingly. This is the state of the program that <code>setjmp()</code>
will need to record, and that <code>longjmp()</code> will restore.</p>

<p>Before reading the source I tried to reason about what I expected would happen.
I presume:</p>

<ul>
<li>General purpose and index registers (eax, ebx, ecx, edx, esi, edi) which don&rsquo;t
  have any effect on control flow can be trivially saved and restored</li>
<li>ebp can similarly be saved &ldquo;as is&rdquo;, since its value when
<code>setjmp()</code> executes is exactly what it needs to be restored to in <code>longjmp()</code></li>
<li>esp cannot be saved &ldquo;as is&rdquo; because when <code>setjmp()</code> executes, there is the
extra eip on the stack that is not there after the function returns. Therefore,
the value for esp that should be saved is esp+4 to match the expected
state of the stack after return</li>
<li>The eip that should be saved is the address of the instruction after the
<code>call setjmp</code> instruction, which can be retrieved from the top of the
stack by dereferencing esp</li>
</ul>


<p>With all that out of the way, let&rsquo;s read the source (all annotations by me)
(<a href="http://git.musl-libc.org/cgit/musl/tree/src/setjmp/i386/setjmp.s">link</a>).
Since this type of low level register manipulation isn&rsquo;t available from C
(modulo compiler intrinsics), both of these functions are necessarily written
in assembly.</p>

<pre><code class="asm">setjmp:
    mov 4(%esp), %eax     ; get pointer to jmp_buf, passed as argument on stack
    mov    %ebx, (%eax)   ; jmp_buf[0] = ebx
    mov    %esi, 4(%eax)  ; jmp_buf[1] = esi
    mov    %edi, 8(%eax)  ; jmp_buf[2] = edi
    mov    %ebp, 12(%eax) ; jmp_buf[3] = ebp
    lea 4(%esp), %ecx     ; get previous value of esp, before call
    mov    %ecx, 16(%eax) ; jmp_buf[4] = esp before call
    mov  (%esp), %ecx     ; get saved caller eip from top of stack
    mov    %ecx, 20(%eax) ; jmp_buf[5] = saved eip
    xor    %eax, %eax     ; eax = 0
    ret                   ; pop stack into eip
</code></pre>

<p>The first line retrieves the argument off the stack, placing a pointer to
the <code>jmp_buf</code> (remember, an array of 6 unsigned longs) in eax. It then moves
ebx, esi,
edi, and ebp &ldquo;as is&rdquo; into the int array. It adds 4 to esp with a <code>lea</code> and
stores that next. Next, it dereferences esp and stores that in the last slot
in the array. Lastly, it zeroes out eax and returns.</p>

<p>The final state of the <code>jmp_buf</code> after <code>setjmp()</code> returns looks like:</p>

<pre><code>   0    1    2    3    4    5
[ ebx, esi, edi, ebp, esp, eip ]
</code></pre>

<p>Now let&rsquo;s look at <code>longjmp()</code> (<a href="http://git.musl-libc.org/cgit/musl/tree/src/setjmp/i386/longjmp.s">link</a>).</p>

<pre><code class="asm">longjmp:
    mov  4(%esp),%edx ; get pointer to jmp_buf, passed as argument 1 on stack
    mov  8(%esp),%eax ; get int val in eax, passed as argument 2 on stack
    test    %eax,%eax ; is int val == 0?
    jnz 1f
    inc     %eax      ; if so, eax++
1:
    mov   (%edx),%ebx ; ebx = jmp_buf[0]
    mov  4(%edx),%esi ; esi = jmp_buf[1]
    mov  8(%edx),%edi ; edi = jmp_buf[2]
    mov 12(%edx),%ebp ; ebp = jmp_buf[3]
    mov 16(%edx),%ecx ; ecx = jmp_buf[4]
    mov     %ecx,%esp ; esp = ecx
    mov 20(%edx),%ecx ; ecx = jmp_buf[5]
    jmp *%ecx         ; eip = ecx
</code></pre>

<p>The first two lines retrieve the arguments (pointer to <code>jmp_buf</code>, int return
val) from the stack into edx and eax, respectively. The int val is
incremented to 1 if it is 0, according to the spec. Next, ebx, esi, edi, and
ebp are reset
to their saved state, stored in the <code>jmp_buf</code>, in a straightforward manner.
As you can see, both <code>setjmp()</code> and <code>longjmp()</code> need to precisely agree on
where each particular register is saved in the <code>jmp_buf</code>.
esp is mysteriously restored in an indirect manner, via ecx<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> and
finally, eip is reset to the saved state via an indirect jump.</p>

<p>So I was mostly correct, but it seems like eax, ecx, and edx were not saved
in the <code>jmp_buf</code>!
If we look back on the details of cdecl, it becomes clear why.</p>

<ul>
<li>eax doesn&rsquo;t need to be saved, because it is reserved for the return value</li>
<li>ecx and edx are <strong>caller saved</strong>. This means that a callee subroutine is
free to trash these registers, and it is the responsibility for the caller
to save and restore them after the subroutine returns. Because of this,
if the function that calls <code>setjmp()</code> needs to use ecx or edx after the
call, it will <strong>already</strong> have code to save and restore those registers before
and after the function call. Since <code>longjmp()</code> resumes execution as if
<code>setjmp()</code> had immediately returned, execution will automatically hit the
code that restores ecx and edx, making it unnecessary to save them in the
<code>jmp_buf</code>.</li>
</ul>


<p>This is just one example of how great musl libc is at providing an
<em>understandable</em> resource for learning the internals of systems software. I
often find myself referencing it when I&rsquo;m curious about libc internals, and
if you&rsquo;re not familiar with it, I highly recommend checking it out!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Mainly, that the function which called <code>setjmp()</code> cannot have returned before the corresponding <code>longjmp()</code> call.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>A slight aside: This situation where a function returns different values based on the execution context also appears in <code>fork()</code>, in which the caller uses the return value to differentiate whether it is now executing in the child or parent process.  <a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>I actually have no good explanation for this and am pretty curious why it&rsquo;s done this way. Something like <code>mov $esp, [$edx+16]</code> is a perfectly valid instruction (tested with <code>rasm2</code>)! I asked on the musl <a href="http://www.openwall.com/lists/musl/2016/01/12/11">mailing list</a>, but no one responded :(. If you have an explanation, please let me know!<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginner Crackme]]></title>
    <link href="http://vmresu.me/blog/2014/10/27/crackme/"/>
    <updated>2014-10-27T00:00:00-04:00</updated>
    <id>http://vmresu.me/blog/2014/10/27/crackme</id>
    <content type="html"><![CDATA[<p>As part of an Intro to Security course I&rsquo;m taking, my professor gave us
a crackme style exercise to practice reading x86 assembly and basic
reverse engineering.</p>

<p>The program is pretty simple. It accepts a password as an argument and we&rsquo;re
told that if the password is correct, &ldquo;ok&rdquo; is printed.</p>

<pre><code>$ ./crackme
usage: ./crackme &lt;secret&gt;
$ ./crackme test
$
</code></pre>

<p>As usual, I start by running <code>file</code> on the binary, which shows that it&rsquo;s a
standard x64 ELF binary. <code>file</code> also says that the binary is &ldquo;not stripped&rdquo;, which means
that it includes symbols. All I really know about symbols are that they can
include debugging information about a binary like function and variable names
and some symbols aren&rsquo;t really necessary; they can be stripped out to reduce
the binary&rsquo;s size and make reverse engineering more challenging. Maybe I&rsquo;ll
do a more in depth post on this in the future.</p>

<pre><code>$ file crackme
crackme: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=0x3fcf895b7865cb6be6b934640d1519a1e6bd6d39, not stripped
</code></pre>

<p>Next, I run <code>strings</code>, hoping to get lucky and find the password amongst the
strings in the binary. Strings looks for series of printable characters followed
by a NULL, but unfortunately nothing here works as the password.</p>

<pre><code>$ strings crackme
/lib64/ld-linux-x86-64.so.2
exd4
libc.so.6
puts
printf
memcmp
__libc_start_main
__gmon_start__
GLIBC_2.2.5
fffff.
AWAVA
AUATL
[]A\A]A^A_
usage: %s &lt;secret&gt;
;*3$"
</code></pre>

<p>Since that didn&rsquo;t work, we&rsquo;re forced to disassemble the binary and
actually try to reverse engineer it.
We&rsquo;ll start with <code>main</code>.</p>

<pre><code class="asm">$ gdb -batch -ex 'file crackme' -ex 'disas main'
Dump of assembler code for function main:
   0x00000000004004a0 &lt;+0&gt;:     sub    rsp,0x8
   0x00000000004004a4 &lt;+4&gt;:     cmp    edi,0x1
   0x00000000004004a7 &lt;+7&gt;:     jle    0x4004c7 &lt;main+39&gt;
   0x00000000004004a9 &lt;+9&gt;:     mov    rdi,QWORD PTR [rsi+0x8]
   0x00000000004004ad &lt;+13&gt;:    call   0x4005e0 &lt;verify_secret&gt;
   0x00000000004004b2 &lt;+18&gt;:    test   eax,eax
   0x00000000004004b4 &lt;+20&gt;:    je     0x4004c2 &lt;main+34&gt;
   0x00000000004004b6 &lt;+22&gt;:    mov    edi,0x4006e8
   0x00000000004004bb &lt;+27&gt;:    call   0x400450 &lt;puts@plt&gt;
   0x00000000004004c0 &lt;+32&gt;:    xor    eax,eax
   0x00000000004004c2 &lt;+34&gt;:    add    rsp,0x8
   0x00000000004004c6 &lt;+38&gt;:    ret
   0x00000000004004c7 &lt;+39&gt;:    mov    rsi,QWORD PTR [rsi]
   0x00000000004004ca &lt;+42&gt;:    mov    edi,0x4006d4
   0x00000000004004cf &lt;+47&gt;:    xor    eax,eax
   0x00000000004004d1 &lt;+49&gt;:    call   0x400460 &lt;printf@plt&gt;
   0x00000000004004d6 &lt;+54&gt;:    mov    eax,0x1
   0x00000000004004db &lt;+59&gt;:    jmp    0x4004c2 &lt;main+34&gt;
End of assembler dump.
</code></pre>

<p>Let&rsquo;s break this down a little.</p>

<pre><code class="asm">    0x00000000004004a0 &lt;+0&gt;:     sub    rsp,0x8
    0x00000000004004a4 &lt;+4&gt;:     cmp    edi,0x1
    0x00000000004004a7 &lt;+7&gt;:     jle    0x4004c7 &lt;main+39&gt;
</code></pre>

<p>Starting at the beginning, we see the stack pointer decremented as part of
the function prologue. The prologue is a set of setup steps involving
saving the old frame&rsquo;s
base pointer on the stack, reassigning the base pointer to the current
stack pointer, then subtracting the stack pointer a certain amount to make room
on the stack
for local variables, etc. We don&rsquo;t see the former two steps because this is
the main function so it doesn&rsquo;t <em>really</em> have a function calling it, so saving/setting
the base pointer isn&rsquo;t necessary.</p>

<p>Then the <code>edi</code> register is
compared to 1 and if it is less than or equal, we jump to offset 39.</p>

<pre><code class="asm">   0x00000000004004c2 &lt;+34&gt;:    add    rsp,0x8
   0x00000000004004c6 &lt;+38&gt;:    ret
   0x00000000004004c7 &lt;+39&gt;:    mov    rsi,QWORD PTR [rsi]
   0x00000000004004ca &lt;+42&gt;:    mov    edi,0x4006d4
   0x00000000004004cf &lt;+47&gt;:    xor    eax,eax
   0x00000000004004d1 &lt;+49&gt;:    call   0x400460 &lt;printf@plt&gt;
   0x00000000004004d6 &lt;+54&gt;:    mov    eax,0x1
   0x00000000004004db &lt;+59&gt;:    jmp    0x4004c2 &lt;main+34&gt;
</code></pre>

<p>Here at offset 39, we print something then jump to offset 34 where we repair
the stack (undo the sub instruction from the prologue) and return (ending
execution).</p>

<p>This is likely how the program checks the arguments and prints the usage
message if no arguments are supplied (which would cause argc/edi to be 1).</p>

<p>However if we supply an argument, <code>edi</code> is 0x2 and we move past the <code>jle</code>
instruction.</p>

<pre><code class="asm">   0x00000000004004a9 &lt;+9&gt;:     mov    rdi,QWORD PTR [rsi+0x8]
   0x00000000004004ad &lt;+13&gt;:    call   0x4005e0 &lt;verify_secret&gt;
</code></pre>

<p>Here we can see the <code>verify_secret</code> function being called with a parameter
in <code>rdi</code>. This is most likely the argument we passed into the program. We can
confirm this with gdb (I&rsquo;m using it with <a href="http://ropshell.com/peda/">peda</a> here).</p>

<pre><code>gdb-peda$ tele $rsi
0000| 0x7fffffffeb48 --&gt; 0x7fffffffed6e ("/home/vagrant/crackme/crackme")
0008| 0x7fffffffeb50 --&gt; 0x7fffffffed8c --&gt; 0x4548530074736574 ('test')
0016| 0x7fffffffeb58 --&gt; 0x0
</code></pre>

<p>Indeed <code>rsi</code> points to the first element of <code>argv</code>, so incrementing that by 8 bytes
(because 64 bit) points to <code>argv[1]</code>, which is our input.</p>

<p>If we look after the <code>verify_secret</code> call we can see the program checks
if <code>eax</code> is 0 and if it is, jumps to offset 34, ending the program. However, if
<code>eax</code> is not zero, we&rsquo;ll hit a <code>puts</code> call before exiting, which will presumably
print out the &ldquo;ok&rdquo; message we want.</p>

<pre><code class="asm">   0x00000000004004b2 &lt;+18&gt;:    test   eax,eax
   0x00000000004004b4 &lt;+20&gt;:    je     0x4004c2 &lt;main+34&gt;
   0x00000000004004b6 &lt;+22&gt;:    mov    edi,0x4006e8
   0x00000000004004bb &lt;+27&gt;:    call   0x400450 &lt;puts@plt&gt;
   0x00000000004004c0 &lt;+32&gt;:    xor    eax,eax
   0x00000000004004c2 &lt;+34&gt;:    add    rsp,0x8
   0x00000000004004c6 &lt;+38&gt;:    ret
</code></pre>

<p>Now lets disassemble <code>verify_secret</code> to see how the input validation is performed,
and to see how we can make it return non-zero.</p>

<pre><code class="asm">Dump of assembler code for function verify_secret:
   0x00000000004005e0 &lt;+0&gt;:     sub    rsp,0x408
   0x00000000004005e7 &lt;+7&gt;:     movzx  eax,BYTE PTR [rdi]
   0x00000000004005ea &lt;+10&gt;:    mov    rcx,rsp
   0x00000000004005ed &lt;+13&gt;:    test   al,al
   0x00000000004005ef &lt;+15&gt;:    je     0x400622 &lt;verify_secret+66&gt;
   0x00000000004005f1 &lt;+17&gt;:    mov    rdx,rsp
   0x00000000004005f4 &lt;+20&gt;:    jmp    0x400604 &lt;verify_secret+36&gt;
   0x00000000004005f6 &lt;+22&gt;:    nop    WORD PTR cs:[rax+rax*1+0x0]
   0x0000000000400600 &lt;+32&gt;:    test   al,al
   0x0000000000400602 &lt;+34&gt;:    je     0x400622 &lt;verify_secret+66&gt;
   0x0000000000400604 &lt;+36&gt;:    xor    eax,0xfffffff7
   0x0000000000400607 &lt;+39&gt;:    lea    rsi,[rsp+0x400]
   0x000000000040060f &lt;+47&gt;:    add    rdx,0x1
   0x0000000000400613 &lt;+51&gt;:    mov    BYTE PTR [rdx-0x1],al
   0x0000000000400616 &lt;+54&gt;:    add    rdi,0x1
   0x000000000040061a &lt;+58&gt;:    movzx  eax,BYTE PTR [rdi]
   0x000000000040061d &lt;+61&gt;:    cmp    rdx,rsi
   0x0000000000400620 &lt;+64&gt;:    jb     0x400600 &lt;verify_secret+32&gt;
   0x0000000000400622 &lt;+66&gt;:    mov    edx,0x18
   0x0000000000400627 &lt;+71&gt;:    mov    esi,0x600a80
   0x000000000040062c &lt;+76&gt;:    mov    rdi,rcx
   0x000000000040062f &lt;+79&gt;:    call   0x400480 &lt;memcmp@plt&gt;
   0x0000000000400634 &lt;+84&gt;:    test   eax,eax
   0x0000000000400636 &lt;+86&gt;:    sete   al
   0x0000000000400639 &lt;+89&gt;:    add    rsp,0x408
   0x0000000000400640 &lt;+96&gt;:    movzx  eax,al
   0x0000000000400643 &lt;+99&gt;:    ret
End of assembler dump.
</code></pre>

<p>I won&rsquo;t walk through this one in detail because understanding each line
isn&rsquo;t necessary to crack this. Let&rsquo;s skip to
the memcmp call. If memcmp returns 0, <code>eax</code> is set to 1 and the function
returns. This is exactly what we want. From the man page, <code>memcmp</code> takes three
parameters, two buffers to compare and their lengths, and returns 0 if the
buffers are identical.</p>

<pre><code class="asm">   0x0000000000400622 &lt;+66&gt;:    mov    edx,0x18
   0x0000000000400627 &lt;+71&gt;:    mov    esi,0x600a80
   0x000000000040062c &lt;+76&gt;:    mov    rdi,rcx
   0x000000000040062f &lt;+79&gt;:    call   0x400480 &lt;memcmp@plt&gt;
</code></pre>

<p>Here&rsquo;s the setup to the <code>memcmp</code> call. We can see the third parameter for length
is the immediate 0x18 meaning the buffers will be 24 bytes in length. If we
examine address 0x600a80, we find this 24 byte string:</p>

<pre><code>gdb-peda$ hexd 0x600a80 /2
0x00600a80 : 91 bf a4 85 85 c3 ba b9 9f a6 b6 b1 93 b9 83 8f   ................
0x00600a90 : ae b1 ae c1 bc 80 ca ca 00 00 00 00 00 00 00 00   ................
</code></pre>

<p>Since this is a direct address to some memory, we can be fairly certain that
we&rsquo;ve found some sort of secret value! Based on the <code>movzx eax,BYTE PTR [rdi]</code>
instruction (offset 7)
which moves a byte from the input string into eax, the <code>xor eax, 0xfffffff7</code>
instruction (offset 36), and
the <code>add rdi, 0x1</code> instruction (offset 54) which increments the char*
pointer to our input string, we can reasonably guess
that this function is xor&#8217;ing each character of our input with 0xf7 and writing
the result into a buffer which begins at <code>rsp</code> (also pointed to by <code>rcx</code>). Since
we now know the secret (<code>\x91\xbf\xa4\x85...</code>) and the xor key (<code>0xf7</code>) it&rsquo;s
pretty easy to extract the password we need by xor&#8217;ing each byte of the secret
with the xor key.</p>

<p>Here&rsquo;s a way to do this with python.</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="nb">str</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">x91</span>\<span class="n">xbf</span>\<span class="n">xa4</span>\<span class="n">x85</span>\<span class="n">x85</span>\<span class="n">xc3</span>\<span class="n">xba</span>\<span class="n">xb9</span>\<span class="n">x9f</span>\<span class="n">xa6</span>\<span class="n">xb6</span>\<span class="n">xb1</span>\<span class="n">x93</span>\<span class="n">xb9</span>\<span class="n">x83</span>\<span class="n">x8f</span>\<span class="n">xae</span>\<span class="n">xb1</span>\<span class="n">xae</span>\<span class="n">xc1</span>\<span class="n">xbc</span>\<span class="n">x80</span>\<span class="n">xca</span>\<span class="n">xca</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
<span class="n">ba</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">byte</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">ba</span><span class="p">):</span>
    <span class="n">ba</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="mh">0xf7</span>
<span class="k">print</span> <span class="n">ba</span></code></pre></div></p>

<p>Which results in this:</p>

<pre><code>$ python crack.py
fHSrr4MNhQAFdNtxYFY6Kw==
$ ./crackme fHSrr4MNhQAFdNtxYFY6Kw==
ok
</code></pre>
]]></content>
  </entry>
  
</feed>
