<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Mark Mossberg's Blog]]></title>
  <link href="http://blog.mark.lc/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.mark.lc/"/>
  <updated>2015-04-25T18:53:22-04:00</updated>
  <id>http://blog.mark.lc/</id>
  <author>
    <name><![CDATA[Mark Mossberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Poet: Beacon Based Post-Exploitation]]></title>
    <link href="http://blog.mark.lc/blog/2014/12/13/poet-beacon-based-post-exploitation/"/>
    <updated>2014-12-13T02:38:31-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/12/13/poet-beacon-based-post-exploitation</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>For the past eight months or so, I&rsquo;ve been working sporadically on a side
project of mine I call <a href="http://github.com/mossberg/poet">Poet</a>. Poet is
basically a tool for hackers that&rsquo;s useful for post exploitation, that is,
<em>after</em> you&rsquo;ve initially exploited and gotten access to the computer you&rsquo;re
not supposed to have access to. Poet is useful because it essentially acts as
a backdoor you can install into a system to help you maintain access once
you&rsquo;ve gotten your foot in the door.</p>

<p>As a disclaimer, I am building Poet purely for my own education and learning experience.
The code is freely available because I think it might be useful to others interested
in learning about this sort of thing. Use it responsibly.</p>

<p>I&rsquo;ve learned a lot during the process of
building this tool and I thought it would be cool to write a blog post (possibly
more to come)
documenting that process.</p>

<h3>Motivation</h3>

<p>The initial motivation for this project came from an experience I had
participating in the 2014 Northeast Collegiate Cyber Defense Competition. In
short, the competition requires a team of students to protect a small
business IT infrastructure from a red team of hackers. Usually the red team
is really good and completely owns you at some point or other throughout
the competition, and at the end they tell you what they did and give
you tips on how to improve. In particular, the red team told us that there
was pre-installed &ldquo;beaconing&rdquo; malware on many of our systems from the start
of the competition that would &ldquo;phone home&rdquo; to a command and control (C2) server
every once in a while to get commands and tasks to execute on the target
system. This idea was pretty interesting to me, and a basic implementation
didn&rsquo;t actually seem <em>too</em> hard to write, so I decided to give it a try, even
though at this point, I had no experience with network programming.</p>

<h3>v0.1</h3>

<p>The first version of Poet was drastically different from the current form
and was just about as simple and primitive as it gets for something
like this. In this version, the client program (executed on target) would
repeatedly attempt to connect to a socket (port 80 by default) on the server (attacker&rsquo;s C2 server)
at a specified interval. If the connection failed (server
wasn&rsquo;t running), the client would sleep, otherwise it would execute
a command sent from the server, sending back the stdout of the command.
The
server simply maintained a queue of commands to execute and would one
by one pop them off the queue and send them to the client, printing out the stdout
when it came back.
This was a great exercise
to learn the basics of socket programming, but of course
wasn&rsquo;t very useful at all, for a number of reasons. First, ideally the client&rsquo;s
interval is very large so as to minimize network use and
remain stealthy but that puts a hard limit on the rate at which
commands can be executed. This system was also very inflexible because there
was no way to reorder or edit commands in the queue, since the &ldquo;user
interface&rdquo; was just a server script that was run with the commands to execute
as arguments. Overall, a good start,
but there was definitely much work ahead to actually make this a semi-realistic tool.</p>

<h3>v0.2</h3>

<p>The second version of Poet involved a pretty substantial redesign although
one of the things to stay the same would be the high
level client/server beaconing dynamic. This is far superior than having the
client attempt to listen on the target&rsquo;s end because in any sort of &ldquo;real&rdquo;
scenario, the target will likely be behind a firewall that will reject
incoming packets on arbitrary ports.
The beaconing model will allow the tool
to bypass most standard firewalls that aren&rsquo;t specifically targeting it because
outbound port 80 traffic is almost certainly
allowed. I later changed the default port to 443 because it&rsquo;s just as
likely to be allowed out and because it could potentially avoid packet inspection,
since traffic on 443 is usually encrypted.</p>

<p>Building on top of this model, there were a couple other brainstorms I had
to build on top of v0.1. Instead of executing a single command for every ping,
what about sending over multiple commands? What about a pastebin/gist URL to
a script that the client
would download and execute? These would help solve the rate limit problem
because an arbitrary number of commands, instead of one, could be executed
for each ping. What about user interface?
What about creating an actual web user interface
for managing the command queue that the client was pulling from each ping?
This would help solve the flexibility problem.</p>

<p>While these would be relatively simple to add to v0.1,
if I asked myself, &ldquo;If I were a hacker, would I
want to use this tool?&rdquo; the answer would be &ldquo;No way!&rdquo; because I would only be able
to interact with my target system via discrete scripts, and I
would have to wait the ideally large time interval between pings to
get any sort of feedback on my actions.</p>

<p>This made it obvious that I would have to move
from a design where each ping from the client was an opportunity for the
user to run <em>x</em> actions on the target,
to a design where each ping from
the client was an opportunity for the user to interactively control the client
for an unlimited time,
and perform actions on the target with continuous feedback.
With this in mind, I opted to use a shell as the user interface on the server
side since it seemed simpler to implement and I was more familiar with
implementing a shell versus something like a web interface (which would
likely have to have a shell built into it anyway for executing commands).
The server design would be similar to that of v0.1 in that the server would
only be running when the user wanted to control the client, and the client
would use the inability to connect to the server as an sign to &ldquo;go to sleep&rdquo;
for another interval, although this isn&rsquo;t strictly necessary. Another server design
I thought of would be an always-on model where the server would always answer
the client&rsquo;s ping with some kind of binary state value, which would work equally
well, but wouldn&rsquo;t be strictly necessary because state can be inferred as
described above.</p>

<p>In designing the actual protocol the client
and server use to communicate, I decided to
use HTTP to mildly obfuscate the client&rsquo;s initial check if
the server is running. The client&rsquo;s ping consists of a
GET request for <code>/style.css</code> on the server <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Of course, the server isn&rsquo;t
a real web server, but it temporarily masquerades as one for the purposes of
the initial handshake and sends back a hardcoded HTTP response of some random
css file, and launches the control shell for the user. At this point, the
protocol used is as simple as it gets: size of the following data + the data
itself. This being my first time doing socket programming, my implementation
was a little weird and reserved the first five bytes of the data sent over the
wire for the ASCII decimal representation of the size (<code>¯\_(ツ)_/¯</code>), but
hey, it worked.</p>

<p>The majority of the work left for v0.2 was essentially deciding on the features
that the control shell would have and implementing the &ldquo;userland utilities&rdquo;
or commands you could run at the shell. The commands I thought of and implemented
were:</p>

<ul>
<li><code>exec</code>: This was the first command I wrote. It executes one or more commands on
the target, sending the stdout of all of them back in one big chunk of text. I later
added a flag that would save the big chunk to a file in the archive directory.
Useful for stuff like grabbing process dumps.</li>
<li><code>recon</code>: Basically like <code>exec</code>, but the commands are pre-selected and are tailored
towards &ldquo;reconnaissance&rdquo; purposes. Stuff like <code>whoami</code>, <code>id</code>, <code>uname -a</code>, <code>w</code>, etc.</li>
<li><code>shell</code>: Launches an actual remote shell on the target (inside the original
control shell). Was implemented
really crudely in this version with the execution backend on the client simply
being something like</li>
</ul>


<pre><code class="python">subprocess.Popen(cmd, stdout=sp.PIPE, stderr=sp.STDOUT, shell=True).communicate()[0]
</code></pre>

<ul>
<li><code>exfil</code>: Exfiltrate files and saves to the archive directory. Pretty standard.
Current implementation is pretty crude, and loads entire file into memory, rather
than paging the data somehow.</li>
<li><code>selfdestruct</code>: Exit the client and delete script on disk. Without this,
the user would have to do something weird (nay, treasonous?) like
killing the client&rsquo;s process from its own remote shell to completely
turn off the client.</li>
<li><code>dlexec</code>: Download an executable from the internet and execute it. Also
pretty standard, useful for upgrading or installing additional tools on target</li>
<li><code>exit</code>: Pretty self explanatory, this tells the client that the server&rsquo;s
done for now and that the client can now go back to sleep and begin pinging
again in one time interval.</li>
</ul>


<p>This work resulted in a decently functional prototype that could feasibly
be used for post-exploitation.</p>

<h3>v0.3</h3>

<p>Version 0.3 was a pretty arbitrary decision, but mostly involved significant
refactoring of the backend code, with a couple new user facing features.
One notable change was the refactoring of the entire codebase from imperative,
C-style programming to object oriented style, which gave the code much better
structure. The communications protocol was also slightly refactored to be
more standard by reserving the first four bytes for
the binary data size value which simultaneously conserved
bytes sent over the wire and increased the maximum data that could be sent in
one message between client and server. An additional shell command I implemented
was called <code>chint</code>, standing for &ldquo;change interval&rdquo;, which lets the server
change the client&rsquo;s ping delay interval after the client&rsquo;s been started.</p>

<p>All that&rsquo;s great, but the most significant set of improvements in my opinion
were related to fleshing out the remote shell feature. While it &ldquo;worked&rdquo;
to a decent degree for most standard commands there were two main problems with
it that kept it from being a &ldquo;real&rdquo; shell. For reference, here&rsquo;s what the code
looked like for executing commands in v0.2.</p>

<pre><code class="python">def cmd_exec(cmd):
    return sp.Popen(cmd, stdout=sp.PIPE, stderr=sp.STDOUT,
                    shell=True).communicate()[0]
</code></pre>

<p>For those that aren&rsquo;t as familiar with Python&rsquo;s <code>subprocess</code> library, this
executes an arbitrary command line (<code>cmd</code>), sending the stderr to the stdout,
and returns any stdout of the command.</p>

<p>The first problem was that the shell
output was not continuous &ndash; when executing a command like <code>ls -R /</code>, which
typically results in lots of scrolling output in a normal terminal, my remote
shell would instead block on the server end while the client executed the
command to its completion and sent over the entire stdout as one big piece.
I solved this problem by adapting the code to continuously poll the
stdout file descriptor for new lines of output, sending those over individually
so that the server would get each line of output as soon as it was available.</p>

<p>The second problem was that if certain commands like <code>ping</code> were executed in the shell,
the client would effectively become unusable because <code>ping</code> (when executed
without the <code>-c</code> parameter) is usually ended by being sent a INT signal (SIGINT),
typically by hitting Ctrl-C on the keyboard. The problem is, the client side
had no mechanism to receive signals and send them to the running process, so
it would be eternally running this unending process and the user
would totally lose control of the target. To solve this problem, I needed a way for the
client to simultaneously execute the requested command, <strong>and</strong> listen for
messages from the server, presumably telling the client to end the running
process. To do this, I learned to use the <code>select()</code> function which is an
easy way for an application to multiplex data streams (in this case,
the stdout of the running process, and the socket connection to the server)
and process their data without requiring concurrency at the application
level.</p>

<p>The resulting code from these two fixes is below. Select takes in multiple
file descriptors (File objects in Python) and returns which ones
are readable (in this example). After it returns, I can check which file descriptors
it returned, and proceed accordingly. In the expected case where
we can read from the process&rsquo;s stdout file descriptor, we get a line of
stdout from the process, forwarding it to the server immediately.
In the exceptional case where we can read from the socket, we receive the message,
making sure it contains the proper keyword to end the process (&lsquo;shellterm&rsquo;)
and terminating the process if it does.</p>

<pre><code class="python">proc = sp.Popen(inp, stdout=sp.PIPE, stderr=sp.STDOUT, shell=True)
while True:
    readable = select.select([proc.stdout, s.s], [], [], 30)[0]
    for fd in readable:
        if fd == proc.stdout:  # proc has stdout/err to send
            output = proc.stdout.readline()
            if output:
                s.send(output)
            else:
                return
        elif fd == s.s:  # remote signal from server
            sig = s.recv()
            if sig == 'shellterm':
                proc.terminate()
                return
</code></pre>

<p>That&rsquo;s all for v0.3. Again, the v0.3 decision was pretty arbitrary and I ultimately
chose to ship it because all the other features I had lined up at
the time were
more labor intensive/experimental and I <em>really</em> wanted to get my fancy
new remote shell into master :D.</p>

<h3>Future Work</h3>

<p>At this point, I&rsquo;m pretty satisfied with the state of the project, but as
always, there&rsquo;s more work to be done. Here are some future features/ideas/improvements
that may or may not ever get implemented:</p>

<ul>
<li><strong>crypto</strong>: If anything, I&rsquo;d say encrypted communications are the one thing
keeping this from being a really usable tool. Right now, communications are
sent in the clear essentially, although they are base64 encoded for the slightest
amount of obfuscation. Ideally I&rsquo;d use Python&rsquo;s ssl library, probably doing
something like hardcoding a server public key into the client. A solution
that wouldn&rsquo;t be as much work, but only slightly more secure than the current
cleartext communications would be to use a basic xor cipher which would be
pretty easy to write, and force an analyst to retrieve the key from memory,
or the initial exchange over the network, depending on how I chose to implement it.</li>
<li><strong>protocol improvement</strong>: This shouldn&rsquo;t actually be too hard to implement,
but the data section of a poet message is typically some type of keyword, a space,
then any relevant data. For example, to start a shell, the server sends
over &ldquo;shell&rdquo;, to get recon data, the server sends &ldquo;recon&rdquo;, for an <code>exec</code>
command, the server sends over &ldquo;exec&rdquo; followed by the commands to execute.
Instead of using these string keywords, it would be possible to move them into
the protocol as a single byte after the data size and have some sort
of lookup table for referencing the appropriate action to each key.</li>
<li><strong>interval fuzzing</strong>: Instead of having a strict, predictable delay time
interval for client pings, I could implement some sort of fuzzing so that the delay
time is slightly variable for further obfuscation
purposes.</li>
</ul>


<p>and last, but not least&hellip;</p>

<ul>
<li><strong>botnet</strong>(?!): Now that I more or less have the infrastructure down for
controlling a single client, it would be pretty cool to
fork the project and adapt it for a more distributed design with multiple
clients connecting to the server, all receiving commands to execute.</li>
</ul>


<hr />

<p>Again, all the code for this project is available on <a href="http://github.com/mossberg/poet">github</a>.
Hopefully this was interesting/helpful for some people, and as always thanks for reading!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Writing this post and thinking about this again actually helped me discover a bug in the server where the server would terminate if it happened to receive a non-client HTTP request while waiting for the client. This would enable a third party that wanted to mess with the Poet user to spam the Poet user&rsquo;s machine with HTTP requests (assuming they knew the proper port to send to) at any interval smaller than the Poet interval, and effectively DOS Poet.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netcat "-e" Analysis]]></title>
    <link href="http://blog.mark.lc/blog/2014/11/03/netcat-exec/"/>
    <updated>2014-11-03T00:00:00-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/11/03/netcat-exec</id>
    <content type="html"><![CDATA[<p>As I mentioned in a <a href="http://blog.mark.lc/blog/2014/03/05/netcat/">previous post</a>, netcat has this cool
<code>-e</code> parameter that lets you specify an executable to essentially turn into
a network service, that is, a process that can send and receive data over the
network. This option is option is particularly useful when called with a shell
(<code>/bin/sh</code>, <code>/bin/bash</code>, etc) as a parameter because this creates a poor man&rsquo;s
remote shell connection, and can also be used as a backdoor into the system.
As part of the <a href="https://github.com/mossberg/poet">post-exploitation tool</a> I&rsquo;m
working on, I wanted to try to add this type of remote shell feature, but it
wasn&rsquo;t immediately obvious to me
how something like this would be done, so I decided to dive into netcat&rsquo;s
source and see if I could understand how it was implemented.</p>

<p>Not knowing where to start, I first tried searching the file for &ldquo;-e&rdquo; which
brought me to:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">case</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">e</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">:</span>           <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">prog</span> <span class="n">to</span> <span class="n">exec</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">opt_exec</span><span class="p">)</span>
<span class="n">ncprint</span><span class="p">(</span><span class="n">NCPRINT_ERROR</span> <span class="o">|</span> <span class="n">NCPRINT_EXIT</span><span class="p">,</span>
    <span class="n">_</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Cannot</span> <span class="n">specify</span> <span class="err">`</span><span class="o">-</span><span class="n">e</span><span class="err">&#39;</span> <span class="n">option</span> <span class="kt">double</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;));</span>
  <span class="n">opt_exec</span> <span class="o">=</span> <span class="n">strdup</span><span class="p">(</span><span class="n">optarg</span><span class="p">);</span>
  <span class="k">break</span><span class="p">;</span></code></pre></div></p>

<p>This snippet is using the GNU argument parsing library, getopt, to check if
&ldquo;-e&rdquo; is set, and if not, setting the global <code>char*</code> variable <code>opt_exec</code> to the
parameter. Then I tried searching for <code>opt_exec</code>, bringing me to:</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">if</span> <span class="p">(</span><span class="n">netcat_mode</span> <span class="o">==</span> <span class="n">NETCAT_LISTEN</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">opt_exec</span><span class="p">)</span> <span class="p">{</span>
<span class="n">ncprint</span><span class="p">(</span><span class="n">NCPRINT_VERB2</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Passing</span> <span class="n">control</span> <span class="n">to</span> <span class="n">the</span> <span class="n">specified</span> <span class="n">program</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;));</span>
<span class="n">ncexec</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">listen_sock</span><span class="p">);</span>       <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">this</span> <span class="n">won</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="k">return</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
  <span class="p">}</span>
  <span class="n">core_readwrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">listen_sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">stdio_sock</span><span class="p">);</span>
  <span class="n">debug_dv</span><span class="p">((</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">Listen</span><span class="p">:</span> <span class="n">EXIT</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;));</span>
<span class="p">}</span></code></pre></div></p>

<p>This code checks if <code>opt_exec</code> is set, and if so calling <code>ncexec()</code>.</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="lineno"> 1</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Execute</span> <span class="n">an</span> <span class="n">external</span> <span class="n">file</span> <span class="n">making</span> <span class="n">its</span> <span class="n">stdin</span><span class="o">/</span><span class="n">stdout</span><span class="o">/</span><span class="n">stderr</span> <span class="n">the</span> <span class="n">actual</span> <span class="n">socket</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="kt">void</span> <span class="n">ncexec</span><span class="p">(</span><span class="kt">nc_sock_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ncsock</span><span class="p">)</span>
<span class="lineno"> 4</span> <span class="p">{</span>
<span class="lineno"> 5</span>   <span class="kt">int</span> <span class="n">saved_stderr</span><span class="p">;</span>
<span class="lineno"> 6</span>   <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p</span><span class="p">;</span>
<span class="lineno"> 7</span>   <span class="n">assert</span><span class="p">(</span><span class="n">ncsock</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">ncsock</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">save</span> <span class="n">the</span> <span class="n">stderr</span> <span class="n">fd</span> <span class="n">because</span> <span class="n">we</span> <span class="n">may</span> <span class="n">need</span> <span class="n">it</span> <span class="n">later</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="lineno">10</span>   <span class="n">saved_stderr</span> <span class="o">=</span> <span class="n">dup</span><span class="p">(</span><span class="n">STDERR_FILENO</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">11</span> 
<span class="lineno">12</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">duplicate</span> <span class="n">the</span> <span class="n">socket</span> <span class="k">for</span> <span class="n">the</span> <span class="n">child</span> <span class="n">program</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="lineno">13</span>   <span class="n">dup2</span><span class="p">(</span><span class="n">ncsock</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">STDIN_FILENO</span><span class="p">);</span>   <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">the</span> <span class="n">precise</span> <span class="n">order</span> <span class="n">of</span> <span class="n">fiddlage</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="lineno">14</span>   <span class="n">close</span><span class="p">(</span><span class="n">ncsock</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">);</span>            <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">apparently</span> <span class="n">crucial</span><span class="p">;</span> <span class="n">this</span> <span class="n">is</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="lineno">15</span>   <span class="n">dup2</span><span class="p">(</span><span class="n">STDIN_FILENO</span><span class="p">,</span> <span class="n">STDOUT_FILENO</span><span class="p">);</span>    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">swiped</span> <span class="n">directly</span> <span class="n">out</span> <span class="n">of</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">inetd</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="lineno">16</span>   <span class="n">dup2</span><span class="p">(</span><span class="n">STDIN_FILENO</span><span class="p">,</span> <span class="n">STDERR_FILENO</span><span class="p">);</span>    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">also</span> <span class="n">duplicate</span> <span class="n">the</span> <span class="n">stderr</span> <span class="n">channel</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">17</span> 
<span class="lineno">18</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">change</span> <span class="n">the</span> <span class="n">label</span> <span class="k">for</span> <span class="n">the</span> <span class="n">executed</span> <span class="n">program</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="lineno">19</span>   <span class="k">if</span> <span class="p">((</span><span class="n">p</span> <span class="o">=</span> <span class="n">strrchr</span><span class="p">(</span><span class="n">opt_exec</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rsquo</span><span class="p">;)))</span>
<span class="lineno">20</span>     <span class="n">p</span><span class="o">++</span><span class="p">;</span>            <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">shorter</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="lineno">21</span>   <span class="k">else</span>
<span class="lineno">22</span>     <span class="n">p</span> <span class="o">=</span> <span class="n">opt_exec</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">23</span> 
<span class="lineno">24</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">replace</span> <span class="n">this</span> <span class="n">process</span> <span class="n">with</span> <span class="n">the</span> <span class="n">new</span> <span class="n">one</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">25</span> 
<span class="lineno">26</span> <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span> <span class="n">USE_OLD_COMPAT</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
<span class="lineno">27</span> 
<span class="lineno">28</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">execl</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">p</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">-</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">opt_exec</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">29</span> 
<span class="lineno">30</span> <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">else</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
<span class="lineno">31</span> 
<span class="lineno">32</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">execl</span><span class="p">(</span><span class="n">opt_exec</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">33</span> 
<span class="lineno">34</span> <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
<span class="lineno">35</span> 
<span class="lineno">36</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">dup2</span><span class="p">(</span><span class="n">saved_stderr</span><span class="p">,</span> <span class="n">STDERR_FILENO</span><span class="p">);</span>
<span class="lineno">37</span>   <span class="n">ncprint</span><span class="p">(</span><span class="n">NCPRINT_ERROR</span> <span class="o">|</span> <span class="n">NCPRINT_EXIT</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Couldn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">execute</span> <span class="o">%</span><span class="nl">s</span><span class="p">:</span> <span class="o">%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;),</span>
<span class="lineno">38</span>       <span class="n">opt_exec</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
<span class="lineno">39</span> <span class="p">}</span>               <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">end</span> <span class="n">of</span> <span class="n">ncexec</span><span class="p">()</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span></code></pre></div></p>

<p>Here, on lines 13-16 is how the &ldquo;-e&rdquo; parameter really works. <code>dup2()</code> accepts
two file descriptors and after deallocating the second one (as if <code>close()</code>
was called on it), the second one&rsquo;s value is set to the first. So in this
case on line 13, the child process&rsquo;s stdin is being set to the file descriptor for the
network socket netcat opened. This means that the child process will view
any data received over the network will as input data and will act accordingly.
Then on lines 15 and 16, the stdout and stderr descriptors are also set to the
socket, which will cause any output the program has to be directed over the
network. As far as line 14 goes, I&rsquo;m not sure why the original socket file descriptor
has to be closed at that exact point (and based on the comments, it seems like
the netcat author wasn&rsquo;t sure either).</p>

<p>The main point is this file descriptor swapping has essentially
converted our specified program into a network service; all the input and output
will be piped over the network, and at this point the child process can
be executed. The child will replace the netcat process and will also inherit
the newly set socket file descriptors. Note that on lines 30 and 31 there&rsquo;s
some error handling code that resets the original stderr for the netcat process
and prints out an error message. This is because the code should actually
never get to this point in execution due to the <code>execl()</code> call and if it does,
there was an error executing the child.</p>

<p>I wrote this little python program to see if I understood
things correctly:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">sys</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">inp</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="k">if</span> <span class="n">inp</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">hello</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">hi</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">bye</span>\<span class="n">n</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span></code></pre></div></p>

<p>It simply reads 5 bytes from stdin and prints &lsquo;hi&rsquo; if those 5 bytes were &lsquo;hello&rsquo;
otherwise printing &lsquo;bye&rsquo;.</p>

<p>Using this program as the <code>-e</code> parameter results in this:</p>

<pre><code class="sh">$ netcat -e /tmp/test.py -lp 8080 &amp;
[1] 19021
$ echo asdfg | netcat 127.0.0.1 8080
bye
[1]+  Done                    netcat -e /tmp/blah.py -lp 8080
$ netcat -e /tmp/test.py -lp 8080 &amp;
[1] 19024
$ echo hello | netcat 127.0.0.1 8080
hi
[1]+  Done                    netcat -e /tmp/blah.py -lp 8080
</code></pre>

<p>We can see the &ldquo;server&rdquo; launched in the background. The <code>echo</code> command sends
data into netcat&rsquo;s stdin, which is being sent over the network, handled by
the python script, which sends back its response, which gets printed. Then we
can see that the server exits since the netcat process has been replaced by
the script, and the script has exited.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netcat Refresher]]></title>
    <link href="http://blog.mark.lc/blog/2014/03/05/netcat/"/>
    <updated>2014-03-05T00:00:00-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/03/05/netcat</id>
    <content type="html"><![CDATA[<p><em>Quick overview of the legendary Unix tool, netcat, with examples and applications</em></p>

<h2>Introduction</h2>

<p><a href="https://en.wikipedia.org/wiki/Netcat">Netcat</a> is a great tool for all things networking and is commonly nicknamed &ldquo;the TCP/IP Swiss-army knife&rdquo; due to its versatility and utility. An absolute must-know for sysadmins and hackers. In this article, I&rsquo;ll go over a few common uses I have for it that I frequently forget after not using it for a while, primarily for my own personal reference.</p>

<p>Before I begin, I should point out that there are a few variants on netcat that have slightly different options and behaviors but are all essentially the same in &ldquo;spirit and functionality&rdquo;, as the <a href="http://nmap.org/ncat/">ncat</a> man page describes it.</p>

<p>The original netcat comes from the OpenBSD package and was written by &ldquo;Hobbit&rdquo;. This is the default version that comes with OS X and Ubuntu. The version that I use and will cover is the standard GNU Netcat, by Giovanni Giacobbi, which is a rewrite of the original. This available using <a href="http://brew.sh">brew</a> on OS X. On Ubuntu it&rsquo;s called &ldquo;netcat-traditional&rdquo; which you can <code>apt-get</code> and then run with <code>nc.traditional</code>. Lastly, there is <a href="http://nmap.org/ncat">ncat</a>, which is a netcat implementation by our friends from the <a href="http://nmap.org">nmap</a> team. It is designed to modernize netcat and adds features like SSL, IPv6, and proxying which aren&rsquo;t available in the original(s).</p>

<h2>Usage</h2>

<p>At its core, netcat is a tool for creating arbitrary TCP connections, which looks like</p>

<pre><code>$ netcat [host] [port]
</code></pre>

<p>where host is either an IP Address or a domain name, and port is the TCP port to connect to.</p>

<p>You can also use netcat to do the reverse: listen for arbitrary TCP connections. This looks like</p>

<pre><code>$ netcat -l -p [port] [host]
</code></pre>

<p>Here, host is an optional parameter which lets you limit what host can create connections.</p>

<h4>Example: Chat</h4>

<p>Using these two behaviors, we can create a crude chat system. One one host, listen for connections on a port.</p>

<pre><code>$ netcat -l -p 1337
</code></pre>

<p>On the same one, in another terminal, connect to it on that port.</p>

<pre><code>$ nc localhost 1337
</code></pre>

<p>There won&rsquo;t be a prompt, but when you enter text and press enter, it will appear in the other terminal. You can just as easily do this between different hosts and have a super basic chat setup.</p>

<p><img src="https://draftin.com:443/images/12181?token=V4hz4Qtwi_uM_-4ulkErwUudxL_qY8D2yxx-fPjLSffSc8-FV0FOVRlvd4psBi-fLricHlJLjufBWr6E91R_spQ" alt="" /></p>

<h3>Example: Curl-like behavior</h3>

<p>You can also use netcat to emulate curl and interact with HTTP servers. Connect to the server on port 80 (or whatever port it&rsquo;s running on) and you can then type out the HTTP request to send to it. When you&rsquo;re finished, hit enter twice and it will send.</p>

<pre><code>[mark:~]{ nc example.org 80
GET / HTTP/1.1

HTTP/1.1 400 Bad Request
Content-Type: text/html
Content-Length: 349
Connection: close
Date: Wed, 05 Mar 2014 20:15:42 GMT
Server: ECSF (mdw/1383)

&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;title&gt;400 - Bad Request&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;400 - Bad Request&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>As you can see here, we sent a bare-bones HTTP request (<code>GET / HTTP/1.1</code>) which was successfully sent to the server. The server responded with a 400, because our request didn&rsquo;t contain enough information, but that&rsquo;s not important; if we had filled in the right headers, it would have responded with the home page for example.org.</p>

<h2>For Hackers</h2>

<p>There are two applications for netcat that I find particularly useful in pen-testing situations.</p>

<h3>Recon</h3>

<p>The first is helpful for the recon stage, which is essentially getting information on your target. Sometimes network services may give away version information when an arbitrary network connection is made. For example, OpenSSH by default gives away it&rsquo;s version information as well as information on the host, when you connect. For example,</p>

<pre><code>$ netcat 1.2.3.4 22
SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.1
</code></pre>

<p>is typically what you might see. For an attacker, this is pretty valuable stuff! MySQL behaves similarly.</p>

<pre><code>$ netcat 1.2.3.4 3306
J
5.5.33-.?2|&gt;\8��@x\E$"zeic2lmysql_native_password
</code></pre>

<p>The output isn&rsquo;t as clear as OpenSSH, but we can confirm that MySQL is indeed running, and we can infer that the version is &ldquo;5.5.33&rdquo;. For information on removing these banners, check out my <a href="http://blog.mark.lc/blog/2014/01/10/banner-hiding/">blog post</a> on it.</p>

<h3>Persistence/Access</h3>

<p>The other application is when you have achieved command execution, but not exactly shell access. You can use netcat to create a nifty backdoor which you can externally connect to. To create the backdoor, we&rsquo;ll use the <code>-e</code> flag to tell netcat to execute a binary on receiving a connection. We want a shell, so we&rsquo;ll say <code>-e /bin/sh</code>. The whole command will look like:</p>

<pre><code>$ netcat -l -p 1337 -e /bin/sh
</code></pre>

<p>which will give you a backdoor on port 1337, which will then let you run commands upon connecting to that port. For a good example, check out my other <a href="http://blog.mark.lc/blog/2014/03/01/ihackedit/">blog post</a> where I actually used this.</p>

<h2>Conclusion</h2>

<p>That was a quick overview of netcat including its basic functionality and some example use cases. Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Banner Hiding on Ubuntu 12.04]]></title>
    <link href="http://blog.mark.lc/blog/2014/01/10/banner-hiding/"/>
    <updated>2014-01-10T17:30:00-05:00</updated>
    <id>http://blog.mark.lc/blog/2014/01/10/banner-hiding</id>
    <content type="html"><![CDATA[<p>In most cases, the first phase of any sort of cyber-attack is the &ldquo;fingerprinting&rdquo; phase. This essentially involves an attacker attempting to ascertain as much information as possible about the target in question, say, a web server also running an ssh service. Some basic pieces of info that the attacker would be interesting in gathering would be the OS installed on the server, and the types of web and ssh servers running as well as version numbers for all of these. With this info, at the very least, the attacker would be able to google <em>&ldquo;[web/ssh server] [version] vulnerabilities&rdquo;</em>, so you can see how it might be a good idea to keep this sort of info hidden. Of course, there is a valid <a href="http://en.wikipedia.org/wiki/Security_through_obscurity">security through obscurity</a> argument to be made here, and even the Apache docs<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> themselves state that</p>

<blockquote><p>&hellip;disabling the Server: header does nothing at all to make your server more secure; the idea of &ldquo;security through obscurity&rdquo; is a myth and leads to a false sense of safety.</p></blockquote>

<p>While I can see how it&rsquo;s not acceptable to use obscurity as a complete solution for potential vulnerabilities, I disagree with the assertion that it does &ldquo;nothing at all.&rdquo; Obviously, everyone should aim to make their systems secure at a fundamental level, and obscurity is no substitute for that, however every little bit that you can do to make it more challenging for an attacker, in order to bolster <em>your existing security implementation</em>, is worth it, in my opinion.</p>

<p>Moving back to the original topic, you might be surprised to know how much of this information (services, version numbers) your server gives away by default. For example, let&rsquo;s take a look at the response headers from a default Apache install:</p>

<p><a href="http://img.svbtle.com/sgoa4yt9b3putw.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/sgoa4yt9b3putw_small.png" alt="Screen_Shot_2013-12-15_at_1.38.13_AM.png" /></a></p>

<p>Right off the bat, we can see that we&rsquo;re giving away our OS, web server, and version. Let&rsquo;s make it a little harder for an attacker and hide everything except for &ldquo;Apache&rdquo;, which can be done with a trivial edit to your <code>/etc/apache2/apache2.conf</code> file. Simply append the following lines at the end of the file.</p>

<pre><code>ServerTokens Prod
ServerSignature Off
</code></pre>

<p>Technically all you really need is the first line, which will do what we want, but the second line will also remove server info in Apache generated pages (error pages, directory listings), so it&rsquo;s probably a good idea too. That gets us this far:</p>

<p><a href="http://img.svbtle.com/1gs6rgbxmeliq.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/1gs6rgbxmeliq_small.png" alt="Screen_Shot_2013-12-15_at_2.01.18_AM.png" /></a></p>

<p>Unfortunately, &ldquo;Apache&rdquo; is as far as we can go with these configuration files; there is no option to turn the server header completely off. However, there is one other thing we can do&hellip; get out your hex editors<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, boys, we&rsquo;re going binary patching! Yes, you heard me right, we&rsquo;re going to directly edit the apache2 binary and remove that pesky banner string.</p>

<p>First off, I recommend making a copy of the binary so if you really screw something up, you can easily get back to where you were. Then get out hexedit and search in the ASCII section for the string &ldquo;Apache&rdquo;. Eventually you&rsquo;ll see some familiar strings all in a row, with the Apache version numbers, etc. There are a couple of them; they represent the different options with the &ldquo;ServerTokens&rdquo; config. The &ldquo;Prod&rdquo; option corresponds to the first instance of &ldquo;Apache&rdquo; there, so let&rsquo;s change it to &ldquo;LOLche&rdquo;. Make sure to only overwrite the existing bytes and nothing more, because doing otherwise could cause other problems with the binary.</p>

<p><a href="http://img.svbtle.com/tok3zivx32pngq.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/tok3zivx32pngq_small.png" alt="Screen_Shot_2013-12-15_at_2.17.43_AM.png" /></a></p>

<p>Restart the apache service, and violá! We&rsquo;re officially running a &ldquo;LOLche&rdquo; web server.</p>

<p><a href="http://img.svbtle.com/rhhj4sha4u4jug.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/rhhj4sha4u4jug_small.png" alt="Screen Shot 2013-12-15 at 2.24.33 AM.png" /></a></p>

<p>While we&rsquo;re messing with these headers, I should point out that you can also add your own headers too. Make sure you have the mod_headers.c Apache module enabled, and then simply append the following to your <code>/etc/apache2/httpd.conf</code>.</p>

<pre><code>&lt;IfModule mod_headers.c&gt;
    Header set Servar "y u look here go away"
&lt;/IfModule&gt;
</code></pre>

<p>Which gives you:</p>

<p><a href="http://img.svbtle.com/9lml4ymw40acog.png"><img src="https://d23f6h5jpj26xu.cloudfront.net/9lml4ymw40acog_small.png" alt="Screen_Shot_2013-12-15_at_2.30.28_AM.png" /></a></p>

<p>Similar to Apache, OpenSSH also gives out a bunch of information by default.</p>

<pre><code>$ nc localhost 22
SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1
</code></pre>

<p>To get rid of the Debian information, just add this line to your <code>/etc/ssh/sshd_config</code>.</p>

<pre><code>DebianBanner no
</code></pre>

<p>However, this still leaves all the OpenSSH stuff. A more complete solution would be to patch the sshd binary in the same way we did the apache binary.</p>

<p>In addition to screwing with people that are physically looking at these headers and stuff, making these quick fixes also makes an nmap port scan much less effective, since this is primarily where nmap gets its information about what services you&rsquo;re running.</p>

<p>Just to reiterate, these configurations are <em>not</em> designed to be security solutions in and of themselves, but are simply meant to bolster your existing security practices and make it just a little harder for attackers to do their thing.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://httpd.apache.org/docs/current/mod/core.html<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>I guess you could also use a plain text editor just as well also.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
